{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport { size } from \"lodash\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TagLang from \"../../../../../../modules/GetTagLang\";\nimport IconPlus from \"../../../../../../components/Icons/Plus\";\nimport utcFormat from \"../../../../../../../helper/date/utcFormat\";\nimport getTimeZoneHour from \"../../../../../../../helper/date/getTimeZoneHour\";\nimport getDurationByHours from \"../../../../../../../helper/date/getDurationByHours\";\nimport getIntervalsTime from \"../../../../../../../helper/date/getIntervalsTime\";\nimport { startHour, endHour, fixDays } from \"../../../../../../catalogs/quotes\";\nimport request from \"../../../../../../../helper/core_services/core/requestService\";\nimport ApiAppoinments from \"../../../../../../../helper/core_services/endpoints/appointments\";\nimport style from \"./formNew.module.scss\";\nvar pic = \"/static/img/favicons/app/human.png\";\nexport default function NewAppoinment(_ref) {\n  var _formik$errors, _formik$errors2;\n\n  var availabilities = _ref.availabilities,\n      dateSelect = _ref.dateSelect,\n      setStateModal = _ref.setStateModal,\n      setActiveRefresh = _ref.setActiveRefresh,\n      setViewState = _ref.setViewState,\n      selectUser = _ref.selectUser,\n      activeRefreshList = _ref.activeRefreshList,\n      setActiveRefreshList = _ref.setActiveRefreshList;\n  var router = useRouter();\n\n  var _useState = useState(startHour),\n      dateFrom = _useState[0],\n      setDateFrom = _useState[1];\n\n  var _useState2 = useState(endHour),\n      dateTo = _useState2[0],\n      setDateTo = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      includesTimes = _useState3[0],\n      setIncludesTimes = _useState3[1];\n\n  useEffect(function () {\n    var intervals = availabilities.filter(function (obj) {\n      return (obj === null || obj === void 0 ? void 0 : obj.weekday) === fixDays.find(function (obj) {\n        return obj.dateValue === (dateSelect === null || dateSelect === void 0 ? void 0 : dateSelect.getDay());\n      }).value;\n    });\n\n    if (size(intervals) > 0) {\n      var arrayDates = getIntervalsTime(dateSelect, intervals, 30);\n      setDateFrom(arrayDates[0]);\n      setDateTo(arrayDates[size(arrayDates) - 1]);\n      setIncludesTimes(arrayDates);\n    }\n  }, [availabilities]);\n  useEffect(function () {\n    if (dateSelect) formik.setFieldValue(\"date\", utcFormat(dateSelect));else formik.setFieldValue(\"date\", \"\");\n  }, [dateSelect]);\n  useEffect(function () {\n    if (selectUser) formik.setFieldValue(\"patient\", selectUser === null || selectUser === void 0 ? void 0 : selectUser.id);else formik.setFieldValue(\"patient\", \"\");\n  }, [selectUser]);\n  var formik = useFormik({\n    validateOnChange: false,\n    validateOnBlur: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData, _ref2) {\n        var resetForm;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref2.resetForm;\n                CreateElement(formData);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSubmit(_x, _x2) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n  useEffect(function () {\n    formik.setFieldValue(\"fromTime\", moment(dateFrom).format(\"HH:mm\"));\n  }, [dateFrom]);\n  useEffect(function () {\n    formik.setFieldValue(\"toTime\", moment(dateTo).format(\"HH:mm\"));\n  }, [dateTo]);\n\n  var CreateElement = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(formData) {\n      var params, result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              params = {\n                patient: formData === null || formData === void 0 ? void 0 : formData.patient,\n                state: 2,\n                datetime: getTimeZoneHour(formData === null || formData === void 0 ? void 0 : formData.date, formData === null || formData === void 0 ? void 0 : formData.fromTime).format(),\n                duration: getDurationByHours(formData === null || formData === void 0 ? void 0 : formData.date, formData === null || formData === void 0 ? void 0 : formData.fromTime, formData === null || formData === void 0 ? void 0 : formData.toTime)\n              };\n              _context2.next = 3;\n              return request(ApiAppoinments.post_new_appointment, params, null, {\n                locale: router.locale\n              });\n\n            case 3:\n              result = _context2.sent;\n\n              if (result) {\n                setStateModal(false);\n                setActiveRefresh(true);\n                setActiveRefreshList(!activeRefreshList);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function CreateElement(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: style.contUser,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: style.contPicture,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: style.picture,\n          children: /*#__PURE__*/_jsx(\"img\", {\n            src: selectUser !== null && selectUser !== void 0 && selectUser.picture ? selectUser.picture : pic\n          })\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: style.nameUser,\n        children: [!selectUser && /*#__PURE__*/_jsx(\"div\", {\n          className: style.unselectUser,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"new_none_patient\"\n          })\n        }), selectUser && /*#__PURE__*/_jsx(\"div\", {\n          children: \"\".concat(selectUser === null || selectUser === void 0 ? void 0 : selectUser.firstName, \" \").concat(selectUser === null || selectUser === void 0 ? void 0 : selectUser.lastName)\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: style.buttonAdd,\n        onClick: function onClick() {\n          return setViewState(2);\n        },\n        children: /*#__PURE__*/_jsx(IconPlus, {})\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: style.contInputs,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: style.contInput,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.tag,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"from_quotes\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(DatePicker, {\n            className: \"\".concat(style.datePicker),\n            selected: dateFrom,\n            onChange: function onChange(date) {\n              return setDateFrom(date);\n            } // minDate={new Date()}\n            // maxDate={dateTo}\n            ,\n            showTimeSelect: true,\n            showTimeSelectOnly: true,\n            timeIntervals: 30,\n            timeCaption: \"Time\",\n            dateFormat: \"HH:mm\",\n            timeFormat: \"HH:mm\",\n            minTime: startHour,\n            maxTime: dateTo,\n            includeTimes: includesTimes\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: style.contInput,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.tag,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"to_quotes\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(DatePicker, {\n            className: \"\".concat(style.datePicker),\n            selected: dateTo,\n            onChange: function onChange(date) {\n              return setDateTo(date);\n            } // minDate={dateFrom}\n            ,\n            showTimeSelect: true,\n            showTimeSelectOnly: true,\n            timeIntervals: 30,\n            timeCaption: \"Time\",\n            dateFormat: \"HH:mm\",\n            timeFormat: \"HH:mm\",\n            minTime: dateFrom,\n            maxTime: endHour,\n            includeTimes: includesTimes\n          })\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: style === null || style === void 0 ? void 0 : style.error,\n      children: (formik === null || formik === void 0 ? void 0 : (_formik$errors = formik.errors) === null || _formik$errors === void 0 ? void 0 : _formik$errors.patient) && /*#__PURE__*/_jsx(TagLang, {\n        group: \"input\",\n        tag: formik === null || formik === void 0 ? void 0 : (_formik$errors2 = formik.errors) === null || _formik$errors2 === void 0 ? void 0 : _formik$errors2.patient\n      })\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: style.contButtons,\n      children: [/*#__PURE__*/_jsx(\"button\", {\n        className: style.buttonCancel,\n        onClick: function onClick() {\n          return setStateModal(false);\n        },\n        type: \"button\",\n        children: /*#__PURE__*/_jsx(TagLang, {\n          group: \"button\",\n          tag: \"cancel\"\n        })\n      }), /*#__PURE__*/_jsx(\"button\", {\n        className: style.buttonAccept,\n        type: \"submit\",\n        children: /*#__PURE__*/_jsx(TagLang, {\n          group: \"button\",\n          tag: \"accept\"\n        })\n      })]\n    })]\n  });\n}\n\nfunction initialValues() {\n  return {\n    patient: \"\",\n    date: \"\",\n    fromTime: \"\",\n    toTime: \"\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    patient: Yup.string().required(\"validation_patient\"),\n    date: Yup.string().required(\"required\"),\n    fromTime: Yup.string().required(\"required\"),\n    toTime: Yup.string().required(\"required\")\n  };\n}","map":null,"metadata":{},"sourceType":"module"}