{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from \"react\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport * as Yup from \"yup\";\nimport { map } from \"lodash\";\nimport useApp from \"../../../../../../hooks/useApp\";\nimport TagLang from \"../../../../../modules/GetTagLang\";\nimport request from \"../../../../../../helper/core_services/core/requestService\";\nimport medical from \"../../../../../../helper/core_services/endpoints/medical_records\";\nimport { message_1 } from \"../../../../../../helper/appearance/messages\";\nimport GetLanguage from \"../../../../../../helper/i18n/getValueTagLang\";\nimport SubFormQuestions from \"./FormSubQuestions\";\nexport default function FormQuestionsClinics() {\n  const {\n    locale\n  } = useApp();\n  const {\n    0: flagSave,\n    1: setFlagSave\n  } = useState(false);\n  const {\n    0: valuesQuestions,\n    1: setValuesQuestions\n  } = useState([]);\n  const formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData, {\n      resetForm\n    }) => {\n      SendForm(formData);\n    }\n  });\n  useEffect(() => {\n    GetQuestions();\n  }, []);\n  useEffect(() => {\n    if (flagSave) {\n      GetQuestions();\n      setFlagSave(false);\n    }\n  }, [flagSave]);\n\n  const GetQuestions = async () => {\n    let req = await request(medical.get_medical_records, {\n      category: 1\n    }, null, locale);\n\n    if (req != null) {\n      PutDataQuestions(req.result);\n    }\n  };\n\n  const PutDataQuestions = info => {\n    formik.setValues({\n      questions: info\n    });\n    setValuesQuestions(info);\n  };\n\n  const SendForm = async formData => {\n    let requestQuestions = [];\n    map(valuesQuestions, element => {\n      let find = formData.questions.find(obj => {\n        if (obj !== null && obj !== void 0 && obj.id) if (obj.id === element.id) return true;\n        return false;\n      });\n\n      if (find === undefined) {\n        requestQuestions.push(request(medical.delete_question, null, [element.id], {\n          locale\n        }));\n      }\n    });\n    map(formData.questions, element => {\n      if (!(element !== null && element !== void 0 && element.id)) requestQuestions.push(request(medical.post_new_question, {\n        question: element.question\n      }, null, {\n        locale\n      }));\n      if (element !== null && element !== void 0 && element.id) requestQuestions.push(request(medical.patch_edit_question, {\n        question: element.question\n      }, [element.id], {\n        locale\n      }));\n    });\n    await Promise.all(requestQuestions);\n    setFlagSave(true);\n    message_1(GetLanguage(\"validation\", \"message_1\"));\n  };\n\n  return /*#__PURE__*/_jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: /*#__PURE__*/_jsx(FormikProvider, {\n      value: formik,\n      children: /*#__PURE__*/_jsx(FieldArray, {\n        name: \"questions\",\n        render: arrayHelpers => /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-12\",\n              children: /*#__PURE__*/_jsx(SubFormQuestions, {\n                formik: formik,\n                arrayHelpers: arrayHelpers,\n                father: \"questions\"\n              })\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"text-right\",\n            children: /*#__PURE__*/_jsxs(\"button\", {\n              className: \"sty-button-dash-1 color-3\",\n              type: \"button\",\n              onClick: () => arrayHelpers.push({\n                question: \"\"\n              }),\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-icon\",\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: \"/static/img/favicons/app/add_w.svg\"\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-tag\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"button\",\n                  tag: \"add\"\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12 text-center sty-magin-b-1\",\n            children: /*#__PURE__*/_jsxs(\"button\", {\n              className: \"sty-button-dash-1\",\n              type: \"submit\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-icon\",\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: \"/static/img/favicons/app/save_w.svg\"\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-tag\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"button\",\n                  tag: \"save\"\n                })\n              })]\n            })\n          })]\n        })\n      })\n    })\n  });\n}\n\nfunction initialValues() {\n  return {\n    questions: []\n  };\n}\n\nfunction validationSchema() {\n  return {\n    questions: Yup.array().of(Yup.object().shape({\n      question: Yup.string().required(\"required\")\n    }))\n  };\n}","map":null,"metadata":{},"sourceType":"module"}