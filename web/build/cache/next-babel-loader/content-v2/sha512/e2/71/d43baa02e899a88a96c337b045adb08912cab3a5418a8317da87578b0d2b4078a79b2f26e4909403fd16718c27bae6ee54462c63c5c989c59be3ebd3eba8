{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport * as Yup from \"yup\";\nimport { map } from \"lodash\";\nimport useApp from \"../../../../../hooks/useApp\";\nimport TagLang from \"../../../../modules/GetTagLang\";\nimport MessageValidation from \"../../../../modules/Forms/MessageValidation\";\nimport GetLanguage from \"../../../../../helper/i18n/getValueTagLang\";\nimport request from \"../../../../../helper/core_services/core/requestService\";\nimport blog from \"../../../../../helper/core_services/endpoints/blog\";\nimport { loadElement } from \"../../../../../helper/appearance/load\";\nimport { sortByAttr } from \"../../../../../helper/array/sort\";\nimport FieldPic from \"../../../../../helper/forms/elements/pic_1\";\nimport FieldVideo from \"../../../../../helper/forms/elements/video\";\nimport FieldCheck from \"../../../../../helper/forms/elements/check\";\nimport SubContentsCont from \"./SubContentsCont\";\nexport default function FormNewBlog({\n  idElement\n}) {\n  const router = useRouter();\n  const {\n    locale\n  } = useApp();\n  const formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData, {\n      resetForm\n    }) => {\n      if (!(formData !== null && formData !== void 0 && formData.id)) SendNewForm(formData, resetForm);else {\n        SendUpdateForm(formData);\n      }\n    }\n  });\n  useEffect(() => {\n    if (idElement) GetData();\n  }, [idElement]);\n\n  const GetData = async () => {\n    let req = await request(blog.get_blog, null, [idElement], {\n      locale\n    });\n\n    if (req != null) {\n      let images = map(req.images, element => {\n        element.image_check = \"up\";\n        element.type = 1;\n        return element;\n      });\n      let texts = map(req.paragraphs, element => {\n        element.type = 2;\n        return element;\n      });\n      let contents = [...images, ...texts];\n      sortByAttr();\n      contents = contents.sortBy(\"order\");\n      PutData(req, contents); // this.setState({ dataGet: req });\n      // this.setState({ imageLements: order });\n    }\n  };\n\n  const PutData = (info, contents) => {\n    let values = {\n      id: info.id,\n      image_check: info.image == null ? \"\" : info.image,\n      image_pic_preview: info.image,\n      video: info.video,\n      title: info.title,\n      instagramLink: info.instagramLink,\n      isActive: info.isActive,\n      isPublic: info.isPublic,\n      content: info.content,\n      contents: contents\n    };\n    formik.setValues(values);\n  };\n\n  const SendNewForm = async (formData, resetForm) => {\n    Object.keys(formData).forEach(key => formData[key] == null && delete formData[key]);\n    loadElement(true);\n    let req = await request(blog.post_blog, formData, null, {\n      locale\n    });\n    loadElement(false);\n    if (req != null) SaveContents(formData, req);\n  };\n\n  const SaveContents = async (formData, info) => {\n    let paramsDina = {\n      content: formData.content,\n      paragraphs: []\n    };\n    let id = info.id;\n\n    if (typeof formData.contents != \"undefined\") {\n      let imagesRequest = [];\n      map(formData.contents, async (element, index) => {\n        if (typeof element.text != \"undefined\") paramsDina.paragraphs.push({\n          order: index,\n          text: element.text\n        });\n\n        if (typeof element.image != \"undefined\") {\n          var params = {\n            order: index,\n            image: element.image\n          };\n          imagesRequest.push(request(blog.post_blog_img, params, [id], {\n            locale\n          }));\n        }\n      });\n      loadElement(true);\n      await Promise.all(imagesRequest);\n      await request(blog.patch_n_blog, paramsDina, [id], {\n        locale\n      });\n      loadElement(false);\n    }\n\n    router.push(\"/dashboard/blogs\");\n  };\n\n  const SendUpdateForm = async formData => {\n    loadElement(true);\n    if (formData.video === null) delete formData.video;\n    if (typeof formData.video === \"string\") delete formData.video;\n    let req = await request(blog.patch_blog, formData, [idElement], {\n      locale\n    });\n    loadElement(false);\n    if (req != null) UpdateContents(formData, req);\n  };\n\n  const UpdateContents = async (formData, info) => {\n    let deleteImage = [];\n    map(info.images, image => {\n      let find = formData.contents.find(obj => obj.id == image.id);\n\n      if (find === undefined) {\n        deleteImage.push(request(blog.delete_blog_img, {}, [idElement, image.id], {\n          locale\n        }));\n      }\n    });\n    await Promise.all(deleteImage);\n    let paramsDina = {\n      content: formData.content,\n      paragraphs: []\n    };\n    let id = idElement;\n\n    if (formData !== null && formData !== void 0 && formData.contents) {\n      let imagesRequest = [];\n      map(formData.contents, async (element, index) => {\n        if (element.type === 2) paramsDina.paragraphs.push({\n          order: index,\n          text: element.text\n        });\n\n        if (element.type === 1) {\n          if (element !== null && element !== void 0 && element.id) {\n            var params = {\n              order: index\n            };\n            if (typeof value == \"string\") params[\"image\"] = element.image;\n            imagesRequest.push(request(blog.patch_blog_img, params, [id, element.id], {\n              locale\n            }));\n          } else {\n            var params = {\n              order: index,\n              image: element.image\n            };\n            imagesRequest.push(request(blog.post_blog_img, params, [id], {\n              locale\n            }));\n          }\n        }\n      });\n      loadElement(true);\n      await Promise.all(deleteImage);\n      await Promise.all(imagesRequest);\n      await request(blog.patch_n_blog, paramsDina, [id], {\n        locale\n      });\n      loadElement(false);\n    }\n\n    router.push(\"/dashboard/blogs\");\n  };\n\n  return /*#__PURE__*/_jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"col-5\",\n        children: [/*#__PURE__*/_jsx(FieldPic, {\n          formik: formik,\n          name: \"image\"\n        }), /*#__PURE__*/_jsx(FieldVideo, {\n          formik: formik,\n          name: \"video\"\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"col-7\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"title\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"input\", {\n              name: `title`,\n              type: \"text\",\n              value: formik.values.title,\n              onChange: formik.handleChange\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.title\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"instagram\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-input\",\n            children: /*#__PURE__*/_jsx(\"input\", {\n              name: `instagramLink`,\n              value: formik.values.instagramLink,\n              onChange: formik.handleChange,\n              type: \"text\"\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-6\",\n            children: /*#__PURE__*/_jsx(FieldCheck, {\n              formik: formik,\n              name: \"isActive\",\n              tag: GetLanguage(\"input\", \"active\")\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-6\",\n            children: /*#__PURE__*/_jsx(FieldCheck, {\n              formik: formik,\n              name: \"isPublic\",\n              tag: GetLanguage(\"input\", \"public\")\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"text\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"textarea\", {\n              name: `content`,\n              value: formik.values.content,\n              onChange: formik.handleChange\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.content\n            })]\n          })]\n        }), /*#__PURE__*/_jsx(\"hr\", {}), /*#__PURE__*/_jsx(FormikProvider, {\n          value: formik,\n          children: /*#__PURE__*/_jsx(FieldArray, {\n            name: \"contents\",\n            render: arrayHelpers => /*#__PURE__*/_jsx(SubContentsCont, {\n              formik: formik,\n              arrayHelpers: arrayHelpers,\n              father: \"contents\"\n            })\n          })\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12 text-center sty-magin-b-1\",\n        children: /*#__PURE__*/_jsxs(\"button\", {\n          className: \"sty-button-dash-1\",\n          type: \"submit\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-icon\",\n            children: /*#__PURE__*/_jsx(\"img\", {\n              src: \"/static/img/favicons/app/save_w.svg\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"button\",\n              tag: \"save\"\n            })\n          })]\n        })\n      })]\n    })\n  });\n}\n\nfunction initialValues() {\n  return {\n    image_check: \"\",\n    title: \"\",\n    instagramLink: \"\",\n    isActive: false,\n    isPublic: false,\n    content: \"\",\n    contents: []\n  };\n}\n\nfunction validationSchema() {\n  return {\n    image_check: Yup.string().required(\"required\"),\n    title: Yup.string().required(\"required\"),\n    content: Yup.string().required(\"required\"),\n    contents: Yup.array().of(Yup.object().shape({\n      // image_check: Yup.string().required(\"required\"),\n      // text: Yup.string().required(\"required\"),\n      image_check: Yup.string().ensure().when(\"text\", {\n        is: undefined,\n        then: Yup.string().required(\"required\")\n      })\n    })) // .required(\"Must have friends\")\n    // .min(3, \"Minimum of 3 friends\"),\n\n  };\n}","map":null,"metadata":{},"sourceType":"module"}