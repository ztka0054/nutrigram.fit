{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport { Collapse, CardBody, Card } from \"reactstrap\";\nimport * as Yup from \"yup\";\nimport { map, size } from \"lodash\";\nimport moment from \"moment\";\nimport useApp from \"../../../../../../../../hooks/useApp\";\nimport TagLang from \"../../../../../../../modules/GetTagLang\";\nimport MessageValidation from \"../../../../../../../modules/Forms/MessageValidation\";\nimport request from \"../../../../../../../../helper/core_services/core/requestService\";\nimport patient from \"../../../../../../../../helper/core_services/endpoints/patients\";\nimport menu from \"../../../../../../../../helper/core_services/endpoints/menu\";\nimport { message_1 } from \"../../../../../../../../helper/appearance/messages\";\nimport GetLanguage from \"../../../../../../../../helper/i18n/getValueTagLang\";\nimport FormContMenu from \"./FormContMenu\";\nimport Table from \"./Table\";\nvar emptyField = {\n  monday: null,\n  tuesday: null,\n  wednesday: null,\n  thursday: null,\n  friday: null,\n  saturday: null,\n  sunday: null\n};\nexport default function FormMenu(_ref) {\n  var ShowData = _ref.ShowData;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useApp = useApp(),\n      locale = _useApp.locale,\n      putFlagChangeElement = _useApp.putFlagChangeElement;\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1];\n\n  var _useState2 = useState([]),\n      selectMeals = _useState2[0],\n      setSelectMeals = _useState2[1];\n\n  var formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData, _ref2) {\n        var resetForm;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref2.resetForm;\n                if (!(formData !== null && formData !== void 0 && formData.idSchecule)) SendNewForm(formData, resetForm);\n                if (formData !== null && formData !== void 0 && formData.idSchecule) SendUpdateForm(formData);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSubmit(_x, _x2) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n  useEffect(function () {\n    GetMeals();\n  }, [locale]);\n  useEffect(function () {\n    if (size(selectMeals) > 0) GetDataPatient();\n  }, [selectMeals]);\n\n  var GetDataPatient = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var req;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return request(patient.get_patient, null, [query.id], {\n                locale: locale\n              });\n\n            case 2:\n              req = _context2.sent;\n\n              if (req != null) {\n                if (req.menu != null) GetUpdateData(req.menu);\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function GetDataPatient() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var toogle = function toogle() {\n    setIsOpen(!isOpen);\n  };\n\n  var GetMeals = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var req;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return request(menu.get_meals_type, null, null, {\n                locale: locale\n              });\n\n            case 2:\n              req = _context3.sent;\n              if (req != null) DrawMeals(req);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function GetMeals() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var GetUpdateData = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(idMenu) {\n      var req, req1, schedulesF, schedules;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return request(menu.get_menu_patient, null, [idMenu], {\n                locale: locale\n              });\n\n            case 2:\n              req = _context4.sent;\n\n              if (!(req != null)) {\n                _context4.next = 13;\n                break;\n              }\n\n              _context4.next = 6;\n              return request(menu.get_menu, null, [req.menu], {\n                locale: locale\n              });\n\n            case 6:\n              req1 = _context4.sent;\n              schedulesF = map(selectMeals, function (element) {\n                var find = req.schedules.find(function (obj) {\n                  return obj.type.id == element.type;\n                });\n                if (find == undefined) return element;else return _objectSpread({\n                  fromTime: moment(\"2020-01-01T\".concat(find.fromTime)).toDate(),\n                  toTime: moment(\"2020-01-01T\".concat(find.toTime)).toDate()\n                }, element);\n              });\n              schedules = map(schedulesF, function (element, index) {\n                var find = req1.mealTypeMenus.find(function (obj) {\n                  return obj.mealType.id == element.type;\n                });\n                formik.setFieldValue(\"schedules[\".concat(index, \"].fromTime\"), element.fromTime);\n                formik.setFieldValue(\"schedules[\".concat(index, \"].toTime\"), element.toTime);\n\n                if (find != undefined) {\n                  formik.setFieldValue(\"schedules[\".concat(index, \"].monday\"), find.monday);\n                  formik.setFieldValue(\"schedules[\".concat(index, \"].tuesday\"), find.tuesday);\n                  formik.setFieldValue(\"schedules[\".concat(index, \"].wednesday\"), find.wednesday);\n                  formik.setFieldValue(\"schedules[\".concat(index, \"].thursday\"), find.thursday);\n                  formik.setFieldValue(\"schedules[\".concat(index, \"].friday\"), find.friday);\n                  formik.setFieldValue(\"schedules[\".concat(index, \"].saturday\"), find.saturday);\n                  formik.setFieldValue(\"schedules[\".concat(index, \"].sunday\"), find.sunday);\n                }\n              });\n              formik.setFieldValue(\"idSchecule\", req.id);\n              formik.setFieldValue(\"menu\", req1.id);\n              formik.setFieldValue(\"name\", req1.name);\n              formik.setFieldValue(\"patient\", query.id);\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function GetUpdateData(_x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var DrawMeals = function DrawMeals(info) {\n    var schedules = map(info, function (element) {\n      return _objectSpread({\n        type: element.id,\n        name: element.name\n      }, emptyField); // arrayHelpers.push({ mealType: element.id, ...element, ...week });\n    });\n    setSelectMeals(schedules);\n    var values = {\n      name: \"\",\n      schedules: schedules\n    };\n    formik.setValues(values);\n  };\n\n  var SelectMenu = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(row, selectMeals) {\n      var req, schedules;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return request(menu.get_menu, null, [row.id], {\n                locale: locale\n              });\n\n            case 2:\n              req = _context5.sent;\n\n              if (req != null) {\n                setIsOpen(false);\n                schedules = map(selectMeals, function (element, index) {\n                  var find = req.mealTypeMenus.find(function (obj) {\n                    return obj.mealType.id === element.type;\n                  });\n\n                  if (find != undefined) {\n                    formik.setFieldValue(\"schedules[\".concat(index, \"].type\"), element.type); // formik.setFieldValue(\n                    //     `schedules[${index}].name`,\n                    //     find.name[localeFix]\n                    // );\n\n                    formik.setFieldValue(\"schedules[\".concat(index, \"].monday\"), find.monday);\n                    formik.setFieldValue(\"schedules[\".concat(index, \"].tuesday\"), find.tuesday);\n                    formik.setFieldValue(\"schedules[\".concat(index, \"].wednesday\"), find.wednesday);\n                    formik.setFieldValue(\"schedules[\".concat(index, \"].thursday\"), find.thursday);\n                    formik.setFieldValue(\"schedules[\".concat(index, \"].friday\"), find.friday);\n                    formik.setFieldValue(\"schedules[\".concat(index, \"].saturday\"), find.saturday);\n                    formik.setFieldValue(\"schedules[\".concat(index, \"].sunday\"), find.sunday);\n                  }\n                });\n                formik.setFieldValue(\"name\", row.name);\n                formik.setFieldValue(\"menu\", row.id);\n                formik.setFieldValue(\"patient\", query.id); // formik.setFieldValue(\"schedules\", schedules);\n              }\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function SelectMenu(_x4, _x5) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var SendNewForm = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(formData) {\n      var dataSend, req;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              dataSend = _objectSpread({}, formData);\n              dataSend.schedules = map(dataSend.schedules, function (element) {\n                var params = _objectSpread({}, element);\n\n                params.fromTime = moment(params.fromTime).format(\"HH:mm:ss\");\n                params.toTime = moment(params.toTime).format(\"HH:mm:ss\");\n                return params;\n              });\n              _context6.next = 4;\n              return request(menu.post_new_menu_patient, dataSend, null, {\n                locale: locale\n              });\n\n            case 4:\n              req = _context6.sent;\n              ShowData();\n              message_1(GetLanguage(\"validation\", \"message_1\"));\n              putFlagChangeElement();\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function SendNewForm(_x6) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var SendUpdateForm = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(formData) {\n      var dataSend, req;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              dataSend = _objectSpread({}, formData);\n              dataSend.schedules = map(dataSend.schedules, function (element) {\n                var params = _objectSpread({}, element);\n\n                params.fromTime = moment(params.fromTime).format(\"HH:mm:ss\");\n                params.toTime = moment(params.toTime).format(\"HH:mm:ss\");\n                return params;\n              });\n              _context7.next = 4;\n              return request(menu.patch_menu_patient, dataSend, [dataSend.idSchecule], {\n                locale: locale\n              });\n\n            case 4:\n              req = _context7.sent;\n              ShowData();\n              message_1(GetLanguage(\"validation\", \"message_1\"));\n              putFlagChangeElement();\n\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function SendUpdateForm(_x7) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-8\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-4 text-right\",\n            children: /*#__PURE__*/_jsxs(\"button\", {\n              className: \"sty-button-dash-1 fix-1 color-3\",\n              type: \"button\",\n              onClick: function onClick() {\n                return toogle();\n              },\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-icon\",\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: \"/static/img/favicons/app/add_w.svg\"\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-tag\",\n                children: \"Seleccionar Men\\xFA\"\n              })]\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12 margin-top-2\",\n        children: /*#__PURE__*/_jsx(Collapse, {\n          isOpen: isOpen,\n          className: \"sty-data-content\",\n          children: /*#__PURE__*/_jsx(Card, {\n            children: /*#__PURE__*/_jsx(CardBody, {\n              children: /*#__PURE__*/_jsx(Table, {\n                values: {\n                  selectMeals: selectMeals\n                },\n                SelectMenu: SelectMenu\n              })\n            })\n          })\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"name\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"input\", {\n              name: \"name\",\n              value: formik.values.name,\n              onChange: formik.handleChange,\n              type: \"text\",\n              disabled: true\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.name\n            })]\n          })]\n        })\n      }), /*#__PURE__*/_jsx(FormikProvider, {\n        value: formik,\n        children: /*#__PURE__*/_jsx(FieldArray, {\n          name: \"schedules\",\n          render: function render(arrayHelpers) {\n            return /*#__PURE__*/_jsx(FormContMenu, {\n              formik: formik,\n              arrayHelpers: arrayHelpers,\n              father: \"schedules\"\n            });\n          }\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12 text-center sty-magin-b-1\",\n        children: /*#__PURE__*/_jsxs(\"button\", {\n          className: \"sty-button-dash-1\",\n          type: \"submit\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-icon\",\n            children: /*#__PURE__*/_jsx(\"img\", {\n              src: \"/static/img/favicons/app/save_w.svg\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"button\",\n              tag: \"save\"\n            })\n          })]\n        })\n      })]\n    })\n  });\n}\n\nfunction initialValues() {\n  return {\n    schedules: [{}]\n  };\n}\n\nfunction validationSchema() {\n  return {// image_check: Yup.string().required(\"required\"),\n  };\n}","map":null,"metadata":{},"sourceType":"module"}