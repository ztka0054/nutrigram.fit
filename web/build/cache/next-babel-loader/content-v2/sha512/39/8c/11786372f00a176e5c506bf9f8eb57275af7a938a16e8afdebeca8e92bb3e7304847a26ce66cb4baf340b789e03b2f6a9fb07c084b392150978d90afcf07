{"ast":null,"code":"import { getToken } from \"../../../utils/localStorage\"; // import { get_cookies } from \"../../cookies/get_cookies_initial\";\n\nexport default function request(endpoint) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var ids = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var url = endpoint.url,\n      typeRequest = endpoint.typeRequest;\n  var configRequest = {\n    headers: {\n      Accept: \"application/json\" // 'X-Timezone': 'UTC'\n\n    }\n  };\n  if (headers != undefined && headers != null) Object.keys(headers).forEach(function (key) {\n    if (key == \"locale\") if (headers[key] != null) configRequest.headers[\"Accept-Language\"] = headers[key];\n    if (key == \"currency\") configRequest.headers[\"X-Currency\"] = headers[key];\n  });\n  if (getToken() != null) configRequest.headers.Authorization = \"Token \".concat(getToken());\n\n  if (ids != null) {\n    ids.map(function (element, i) {\n      url = url.replaceAt(url.indexOf(\"#\"), element);\n    });\n  }\n\n  switch (typeRequest) {\n    case \"get\":\n      configRequest.headers[\"Content-Type\"] = \"application/json\";\n      configRequest[\"method\"] = \"GET\";\n\n      if (params !== null) {\n        var elements = [];\n        Object.keys(params).forEach(function (key) {\n          elements.push(\"\".concat(key, \"=\").concat(encodeURIComponent(params[key])));\n        });\n        url = \"\".concat(url, \"?\").concat(elements.join(\"&\"));\n      }\n\n      break;\n\n    case \"post\":\n      configRequest.headers[\"Content-Type\"] = \"application/json\";\n      configRequest[\"method\"] = \"POST\";\n      if (params != null) configRequest[\"body\"] = JSON.stringify(params);\n      break;\n\n    case \"post-form\":\n      configRequest[\"method\"] = \"POST\";\n\n      if (params !== null) {\n        var formData = new FormData();\n        var elements = [];\n        Object.keys(params).forEach(function (key) {\n          formData.append(key, params[key]);\n        });\n        configRequest[\"body\"] = formData;\n      }\n\n      break;\n\n    case \"put\":\n      configRequest.headers[\"Content-Type\"] = \"application/json\";\n      configRequest[\"method\"] = \"PUT\";\n      if (params != null) configRequest[\"body\"] = JSON.stringify(params);\n      break;\n      break;\n\n    case \"put-form\":\n      configRequest[\"method\"] = \"PUT\";\n\n      if (params !== null) {\n        var formData = new FormData();\n        var elements = [];\n        Object.keys(params).forEach(function (key) {\n          formData.append(key, params[key]);\n        });\n        configRequest[\"body\"] = formData;\n      }\n\n      break;\n\n    case \"patch\":\n      configRequest.headers[\"Content-Type\"] = \"application/json\";\n      configRequest[\"method\"] = \"PATCH\";\n      if (params != null) configRequest[\"body\"] = JSON.stringify(params);\n      break;\n\n    case \"patch-form\":\n      configRequest[\"method\"] = \"PATCH\";\n\n      if (params !== null) {\n        var formData = new FormData();\n        var elements = [];\n        Object.keys(params).forEach(function (key) {\n          formData.append(key, params[key]);\n        });\n        configRequest[\"body\"] = formData;\n      }\n\n      break;\n\n    case \"delete\":\n      configRequest.headers[\"Content-Type\"] = \"application/json\";\n      configRequest[\"method\"] = \"DELETE\";\n      if (params != null) configRequest[\"body\"] = JSON.stringify(params);\n      break;\n\n    default:\n      break;\n  }\n\n  return fetch(url, configRequest).then(function (res) {\n    var data = {\n      error: false\n    };\n    data.statusHttp = res.status;\n\n    switch (res.status) {\n      case 404:\n        data.error = true;\n        data.errorMessage = res.statusText;\n        break;\n\n      case 400:\n        data.error = true;\n        data.errorMessage = res.json();\n        break;\n\n      default:\n        data.response = {};\n        break;\n    }\n\n    if (res.status >= 200 && res.status < 204) {\n      data.response = res.json();\n    }\n\n    return data;\n  })[\"catch\"](function (error) {\n    console.error(\"Error:\", error);\n    return null;\n  });\n}\n\nString.prototype.replaceAt = function (index, replacement) {\n  if (index >= this.length) {\n    return this.valueOf();\n  }\n\n  return this.substring(0, index) + replacement + this.substring(index + 1);\n};","map":null,"metadata":{},"sourceType":"module"}