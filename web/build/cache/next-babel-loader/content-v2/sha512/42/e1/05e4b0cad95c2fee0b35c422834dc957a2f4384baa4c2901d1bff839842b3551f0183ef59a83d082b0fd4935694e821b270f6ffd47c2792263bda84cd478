{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport { size } from \"lodash\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TagLang from \"../../../../../../modules/GetTagLang\";\nimport IconPlus from \"../../../../../../components/Icons/Plus\";\nimport utcFormat from \"../../../../../../../helper/date/utcFormat\";\nimport getTimeZoneHour from \"../../../../../../../helper/date/getTimeZoneHour\";\nimport getDurationByHours from \"../../../../../../../helper/date/getDurationByHours\";\nimport getIntervalsTime from \"../../../../../../../helper/date/getIntervalsTime\";\nimport { startHour, endHour, fixDays } from \"../../../../../../catalogs/quotes\";\nimport request from \"../../../../../../../helper/core_services/core/requestService\";\nimport ApiAppoinments from \"../../../../../../../helper/core_services/endpoints/appointments\";\nimport style from \"./formNew.module.scss\";\nconst pic = \"/static/img/favicons/app/human.png\";\nexport default function NewAppoinment({\n  availabilities,\n  dateSelect,\n  setStateModal,\n  setActiveRefresh,\n  setViewState,\n  selectUser,\n  activeRefreshList,\n  setActiveRefreshList\n}) {\n  var _formik$errors, _formik$errors2;\n\n  const router = useRouter();\n  const {\n    0: dateFrom,\n    1: setDateFrom\n  } = useState(startHour);\n  const {\n    0: dateTo,\n    1: setDateTo\n  } = useState(endHour);\n  const {\n    0: includesTimes,\n    1: setIncludesTimes\n  } = useState(undefined);\n  useEffect(() => {\n    let intervals = availabilities.filter(obj => (obj === null || obj === void 0 ? void 0 : obj.weekday) === fixDays.find(obj => obj.dateValue === (dateSelect === null || dateSelect === void 0 ? void 0 : dateSelect.getDay())).value);\n\n    if (size(intervals) > 0) {\n      let arrayDates = getIntervalsTime(dateSelect, intervals, 30);\n      setDateFrom(arrayDates[0]);\n      setDateTo(arrayDates[size(arrayDates) - 1]);\n      setIncludesTimes(arrayDates);\n    }\n  }, [availabilities]);\n  useEffect(() => {\n    if (dateSelect) formik.setFieldValue(\"date\", utcFormat(dateSelect));else formik.setFieldValue(\"date\", \"\");\n  }, [dateSelect]);\n  useEffect(() => {\n    if (selectUser) formik.setFieldValue(\"patient\", selectUser === null || selectUser === void 0 ? void 0 : selectUser.id);else formik.setFieldValue(\"patient\", \"\");\n  }, [selectUser]);\n  const formik = useFormik({\n    validateOnChange: false,\n    validateOnBlur: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData, {\n      resetForm\n    }) => {\n      CreateElement(formData);\n    }\n  });\n  useEffect(() => {\n    formik.setFieldValue(\"fromTime\", moment(dateFrom).format(\"HH:mm\"));\n  }, [dateFrom]);\n  useEffect(() => {\n    formik.setFieldValue(\"toTime\", moment(dateTo).format(\"HH:mm\"));\n  }, [dateTo]);\n\n  const CreateElement = async formData => {\n    let params = {\n      patient: formData === null || formData === void 0 ? void 0 : formData.patient,\n      state: 2,\n      datetime: getTimeZoneHour(formData === null || formData === void 0 ? void 0 : formData.date, formData === null || formData === void 0 ? void 0 : formData.fromTime).format(),\n      duration: getDurationByHours(formData === null || formData === void 0 ? void 0 : formData.date, formData === null || formData === void 0 ? void 0 : formData.fromTime, formData === null || formData === void 0 ? void 0 : formData.toTime)\n    };\n    let result = await request(ApiAppoinments.post_new_appointment, params, null, {\n      locale: router.locale\n    });\n\n    if (result) {\n      setStateModal(false);\n      setActiveRefresh(true);\n      setActiveRefreshList(!activeRefreshList);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: style.contUser,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: style.contPicture,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: style.picture,\n          children: /*#__PURE__*/_jsx(\"img\", {\n            src: selectUser !== null && selectUser !== void 0 && selectUser.picture ? selectUser.picture : pic\n          })\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: style.nameUser,\n        children: [!selectUser && /*#__PURE__*/_jsx(\"div\", {\n          className: style.unselectUser,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"new_none_patient\"\n          })\n        }), selectUser && /*#__PURE__*/_jsx(\"div\", {\n          children: `${selectUser === null || selectUser === void 0 ? void 0 : selectUser.firstName} ${selectUser === null || selectUser === void 0 ? void 0 : selectUser.lastName}`\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: style.buttonAdd,\n        onClick: () => setViewState(2),\n        children: /*#__PURE__*/_jsx(IconPlus, {})\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: style.contInputs,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: style.contInput,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.tag,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"from_quotes\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(DatePicker, {\n            className: `${style.datePicker}`,\n            selected: dateFrom,\n            onChange: date => setDateFrom(date) // minDate={new Date()}\n            // maxDate={dateTo}\n            ,\n            showTimeSelect: true,\n            showTimeSelectOnly: true,\n            timeIntervals: 30,\n            timeCaption: \"Time\",\n            dateFormat: \"HH:mm\",\n            timeFormat: \"HH:mm\",\n            minTime: startHour,\n            maxTime: dateTo,\n            includeTimes: includesTimes\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: style.contInput,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.tag,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"to_quotes\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(DatePicker, {\n            className: `${style.datePicker}`,\n            selected: dateTo,\n            onChange: date => setDateTo(date) // minDate={dateFrom}\n            ,\n            showTimeSelect: true,\n            showTimeSelectOnly: true,\n            timeIntervals: 30,\n            timeCaption: \"Time\",\n            dateFormat: \"HH:mm\",\n            timeFormat: \"HH:mm\",\n            minTime: dateFrom,\n            maxTime: endHour,\n            includeTimes: includesTimes\n          })\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: style === null || style === void 0 ? void 0 : style.error,\n      children: (formik === null || formik === void 0 ? void 0 : (_formik$errors = formik.errors) === null || _formik$errors === void 0 ? void 0 : _formik$errors.patient) && /*#__PURE__*/_jsx(TagLang, {\n        group: \"input\",\n        tag: formik === null || formik === void 0 ? void 0 : (_formik$errors2 = formik.errors) === null || _formik$errors2 === void 0 ? void 0 : _formik$errors2.patient\n      })\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: style.contButtons,\n      children: [/*#__PURE__*/_jsx(\"button\", {\n        className: style.buttonCancel,\n        onClick: () => setStateModal(false),\n        type: \"button\",\n        children: /*#__PURE__*/_jsx(TagLang, {\n          group: \"button\",\n          tag: \"cancel\"\n        })\n      }), /*#__PURE__*/_jsx(\"button\", {\n        className: style.buttonAccept,\n        type: \"submit\",\n        children: /*#__PURE__*/_jsx(TagLang, {\n          group: \"button\",\n          tag: \"accept\"\n        })\n      })]\n    })]\n  });\n}\n\nfunction initialValues() {\n  return {\n    patient: \"\",\n    date: \"\",\n    fromTime: \"\",\n    toTime: \"\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    patient: Yup.string().required(\"validation_patient\"),\n    date: Yup.string().required(\"required\"),\n    fromTime: Yup.string().required(\"required\"),\n    toTime: Yup.string().required(\"required\")\n  };\n}","map":null,"metadata":{},"sourceType":"module"}