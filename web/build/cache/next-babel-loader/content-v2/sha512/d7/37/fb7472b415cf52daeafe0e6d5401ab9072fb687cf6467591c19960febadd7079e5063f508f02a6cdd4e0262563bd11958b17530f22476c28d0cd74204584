{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport * as Yup from \"yup\";\nimport { map } from \"lodash\";\nimport useApp from \"../../../../../../hooks/useApp\";\nimport request from \"../../../../../../helper/core_services/core/requestService\";\nimport apiMedicalRecords from \"../../../../../../helper/core_services/endpoints/medical_records\";\nimport { loadElement } from \"../../../../../../helper/appearance/load\";\nimport FormSubContQuestions from \"./FormSubContQuestions\";\nexport default function FormQuestionnarie(_ref) {\n  var _ref$idPatient = _ref.idPatient,\n      idPatient = _ref$idPatient === void 0 ? null : _ref$idPatient,\n      questionsInfo = _ref.questionsInfo,\n      setFormLifestyle = _ref.setFormLifestyle,\n      setFlagSendLifestyle = _ref.setFlagSendLifestyle;\n\n  var _useApp = useApp(),\n      locale = _useApp.locale;\n\n  var formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData, _ref2) {\n        var resetForm;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref2.resetForm;\n                SendForm(formData, resetForm);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSubmit(_x, _x2) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n  useEffect(function () {\n    setFormLifestyle(formik);\n  }, []);\n  useEffect(function () {\n    if (idPatient != null) getInformation();\n  }, [questionsInfo, idPatient]);\n  useEffect(function () {\n    GetQuestions();\n  }, []);\n\n  var GetQuestions = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              formik.setFieldValue(\"questions\", questionsInfo);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function GetQuestions() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var getInformation = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var reqQuestons, questions;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return request(apiMedicalRecords.get_question_ans, null, [idPatient], {\n                locale: locale\n              }, false);\n\n            case 2:\n              reqQuestons = _context3.sent;\n\n              if (reqQuestons != null) {\n                questions = map(questionsInfo, function (element, index) {\n                  var find = reqQuestons.find(function (obj) {\n                    return obj.question === element.id;\n                  });\n                  if (find == undefined) return _objectSpread({}, element);else return _objectSpread(_objectSpread({}, element), {}, {\n                    answer: find.answer,\n                    idAnswer: find.id\n                  });\n                });\n                formik.setValues({\n                  questions: questions\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getInformation() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var SendForm = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(formData) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return SaveQuestions(formData);\n\n            case 2:\n              setFlagSendLifestyle(true);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function SendForm(_x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var SaveQuestions = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(formData) {\n      var arrayRequest;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              arrayRequest = [];\n              map(formData.questions, function (element) {\n                if (element.answer != null) {\n                  if (!(element !== null && element !== void 0 && element.idAnswer)) {\n                    var params = {\n                      answer: element.answer,\n                      question: element.id\n                    };\n                    arrayRequest.push(request(apiMedicalRecords.post_new_question_ans, params, [formData.idUser], {\n                      locale: locale\n                    }));\n                  }\n\n                  if (element !== null && element !== void 0 && element.idAnswer) {\n                    var _params = {\n                      answer: element.answer,\n                      question: element.id\n                    };\n                    arrayRequest.push(request(apiMedicalRecords.patch_new_question_ans, _params, [formData.idUser, element.idAnswer], {\n                      locale: locale\n                    }));\n                  }\n                }\n              });\n              loadElement(true);\n              _context5.next = 5;\n              return Promise.all(arrayRequest);\n\n            case 5:\n              loadElement(false);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function SaveQuestions(_x4) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsx(FormikProvider, {\n            value: formik,\n            children: /*#__PURE__*/_jsx(FieldArray, {\n              name: \"questions\",\n              render: function render(arrayHelpers) {\n                return /*#__PURE__*/_jsx(FormSubContQuestions, {\n                  formik: formik,\n                  arrayHelpers: arrayHelpers,\n                  father: \"questions\"\n                });\n              }\n            })\n          })\n        })\n      })\n    })\n  });\n}\n\nfunction initialValues() {\n  return {\n    questions: []\n  };\n}\n\nfunction validationSchema() {\n  return {};\n}","map":null,"metadata":{},"sourceType":"module"}