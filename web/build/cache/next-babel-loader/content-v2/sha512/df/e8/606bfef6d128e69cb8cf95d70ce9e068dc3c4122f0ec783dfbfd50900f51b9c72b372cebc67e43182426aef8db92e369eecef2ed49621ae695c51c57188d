{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Calendar from \"./Calendar\";\nimport Data from \"./DataSection\";\nimport request from \"../../../../../helper/core_services/core/requestService\";\nimport ApiAppoinments from \"../../../../../helper/core_services/endpoints/appointments\";\nimport style from \"./detail.module.scss\";\nexport default function Quotes() {\n  const router = useRouter();\n  const {\n    0: dateSelect,\n    1: setDateSelect\n  } = useState(new Date());\n  const {\n    0: availabilities,\n    1: setAvailabilities\n  } = useState([]);\n  const {\n    0: unavailabilities,\n    1: setUnavailabilities\n  } = useState(null);\n  const {\n    0: activeRefresh,\n    1: setActiveRefresh\n  } = useState(true);\n  useEffect(() => {\n    if (!router.isReady) return;\n    let ignore = false;\n\n    async function requestAvailavility() {\n      let result = await request(ApiAppoinments.get_availabilities, null, null, {\n        local: router.locale\n      });\n\n      if (result) {\n        setAvailabilities(result.result);\n      }\n    }\n\n    async function requestUnavailabilities() {\n      let result = await request(ApiAppoinments.get_unavailabilities, null, null, {\n        local: router.locale\n      });\n\n      if (result) {\n        setUnavailabilities(result.result);\n      }\n    }\n\n    requestAvailavility();\n    requestUnavailabilities();\n    return () => {\n      ignore = true;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: style.cont,\n    children: [/*#__PURE__*/_jsx(Calendar, {\n      setDateSelect: setDateSelect,\n      dateSelect: dateSelect,\n      unavailabilities: unavailabilities,\n      setActiveRefresh: setActiveRefresh,\n      activeRefresh: activeRefresh\n    }), /*#__PURE__*/_jsx(Data, {\n      dateSelect: dateSelect,\n      availabilities: availabilities,\n      setActiveRefresh: setActiveRefresh\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}