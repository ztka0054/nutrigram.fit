{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport * as Yup from \"yup\";\nimport { map } from \"lodash\";\nimport useApp from \"../../../../../../hooks/useApp\";\nimport request from \"../../../../../../helper/core_services/core/requestService\";\nimport apiMedicalRecords from \"../../../../../../helper/core_services/endpoints/medical_records\";\nimport { loadElement } from \"../../../../../../helper/appearance/load\";\nimport FormSubContQuestions from \"./FormSubContQuestions\";\nexport default function FormQuestionnarie({\n  idPatient = null,\n  questionsInfo,\n  setFormLifestyle,\n  setFlagSendLifestyle\n}) {\n  const {\n    locale\n  } = useApp();\n  const formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData, {\n      resetForm\n    }) => {\n      SendForm(formData, resetForm);\n    }\n  });\n  useEffect(() => {\n    setFormLifestyle(formik);\n  }, []);\n  useEffect(() => {\n    if (idPatient != null) getInformation();\n  }, [questionsInfo, idPatient]);\n  useEffect(() => {\n    GetQuestions();\n  }, []);\n\n  const GetQuestions = async () => {\n    formik.setFieldValue(\"questions\", questionsInfo);\n  };\n\n  const getInformation = async () => {\n    let reqQuestons = await request(apiMedicalRecords.get_question_ans, null, [idPatient], {\n      locale\n    }, false);\n\n    if (reqQuestons != null) {\n      let questions = map(questionsInfo, (element, index) => {\n        let find = reqQuestons.find(obj => {\n          return obj.question === element.id;\n        });\n        if (find == undefined) return _objectSpread({}, element);else return _objectSpread(_objectSpread({}, element), {}, {\n          answer: find.answer,\n          idAnswer: find.id\n        });\n      });\n      formik.setValues({\n        questions\n      });\n    }\n  };\n\n  const SendForm = async formData => {\n    await SaveQuestions(formData);\n    setFlagSendLifestyle(true);\n  };\n\n  const SaveQuestions = async formData => {\n    let arrayRequest = [];\n    map(formData.questions, element => {\n      if (element.answer != null) {\n        if (!(element !== null && element !== void 0 && element.idAnswer)) {\n          let params = {\n            answer: element.answer,\n            question: element.id\n          };\n          arrayRequest.push(request(apiMedicalRecords.post_new_question_ans, params, [formData.idUser], {\n            locale\n          }));\n        }\n\n        if (element !== null && element !== void 0 && element.idAnswer) {\n          let params = {\n            answer: element.answer,\n            question: element.id\n          };\n          arrayRequest.push(request(apiMedicalRecords.patch_new_question_ans, params, [formData.idUser, element.idAnswer], {\n            locale\n          }));\n        }\n      }\n    });\n    loadElement(true);\n    await Promise.all(arrayRequest);\n    loadElement(false);\n  };\n\n  return /*#__PURE__*/_jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsx(FormikProvider, {\n            value: formik,\n            children: /*#__PURE__*/_jsx(FieldArray, {\n              name: \"questions\",\n              render: arrayHelpers => /*#__PURE__*/_jsx(FormSubContQuestions, {\n                formik: formik,\n                arrayHelpers: arrayHelpers,\n                father: \"questions\"\n              })\n            })\n          })\n        })\n      })\n    })\n  });\n}\n\nfunction initialValues() {\n  return {\n    questions: []\n  };\n}\n\nfunction validationSchema() {\n  return {};\n}","map":null,"metadata":{},"sourceType":"module"}