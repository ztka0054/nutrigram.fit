{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport { setHours, setMinutes } from \"date-fns\";\nimport moment from \"moment\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TagLang from \"../../../../../../modules/GetTagLang\";\nimport getValueTagLang from \"../../../../../../../helper/i18n/getValueTagLang\";\nimport request from \"../../../../../../../helper/core_services/core/requestService\";\nimport ApiAppoinments from \"../../../../../../../helper/core_services/endpoints/appointments\";\nimport InputSelect from \"../../../../../../components/Inputs/InputTypeForm_1/InputSelectForm_1_lang\";\nimport { days } from \"../../../../../../catalogs/quotes\";\nimport { startHour, endHour } from \"../../../../../../catalogs/quotes\";\nimport style from \"./formNew.module.scss\";\nexport default function IndexForm({\n  setStateModal,\n  setRefresh,\n  availailityObject\n}) {\n  var _formik$errors;\n\n  const router = useRouter();\n  const {\n    0: dateFrom,\n    1: setDateFrom\n  } = useState(startHour);\n  const {\n    0: dateTo,\n    1: setDateTo\n  } = useState(endHour);\n  useEffect(() => {\n    if (availailityObject) {\n      let fromTime = availailityObject === null || availailityObject === void 0 ? void 0 : availailityObject.fromTime.split(\":\");\n      let toTime = availailityObject === null || availailityObject === void 0 ? void 0 : availailityObject.toTime.split(\":\");\n      formik.setFieldValue(\"id\", availailityObject === null || availailityObject === void 0 ? void 0 : availailityObject.id);\n      formik.setFieldValue(\"weekday\", availailityObject === null || availailityObject === void 0 ? void 0 : availailityObject.weekday);\n      setDateFrom(setHours(setMinutes(new Date(), parseInt(fromTime[1])), parseInt(fromTime[0])));\n      setDateTo(setHours(setMinutes(new Date(), parseInt(toTime[1])), parseInt(toTime[0])));\n    }\n  }, [availailityObject]);\n  const formik = useFormik({\n    validateOnChange: false,\n    validateOnBlur: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData, {\n      resetForm\n    }) => {\n      if (formData !== null && formData !== void 0 && formData.id) UpdateElement(formData);else CreateElement(formData);\n    }\n  });\n  useEffect(() => {\n    formik.setFieldValue(\"fromTime\", moment(dateFrom).format(\"HH:mm\"));\n  }, [dateFrom]);\n  useEffect(() => {\n    formik.setFieldValue(\"toTime\", moment(dateTo).format(\"HH:mm\"));\n  }, [dateTo]);\n\n  const UpdateElement = async formData => {\n    let result = await request(ApiAppoinments.patch_availabilities, formData, [formData === null || formData === void 0 ? void 0 : formData.id], {\n      locale: router.locale\n    });\n\n    if (result) {\n      setStateModal(false);\n      setRefresh(true);\n    }\n  };\n\n  const CreateElement = async formData => {\n    let result = await request(ApiAppoinments.post_availabilities, formData, null, {\n      locale: router.locale\n    });\n\n    if (result) {\n      setStateModal(false);\n      setRefresh(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: style.contInputs,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: style.contInput,\n        children: /*#__PURE__*/_jsx(InputSelect, {\n          formik: formik,\n          elements: days,\n          title: getValueTagLang(\"input\", \"day_quotes\"),\n          name: `weekday`,\n          value: formik.values.weekday,\n          error: formik === null || formik === void 0 ? void 0 : (_formik$errors = formik.errors) === null || _formik$errors === void 0 ? void 0 : _formik$errors.weekday\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: style.contInput,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.tag,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"from_quotes\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(DatePicker, {\n            className: `${style.datePicker}`,\n            selected: dateFrom,\n            onChange: date => setDateFrom(date) // minDate={new Date()}\n            // maxDate={dateTo}\n            ,\n            showTimeSelect: true,\n            showTimeSelectOnly: true,\n            timeIntervals: 30,\n            timeCaption: \"Time\",\n            dateFormat: \"HH:mm\",\n            timeFormat: \"HH:mm\",\n            minTime: startHour,\n            maxTime: dateTo\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: style.contInput,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.tag,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"to_quotes\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(DatePicker, {\n            className: `${style.datePicker}`,\n            selected: dateTo,\n            onChange: date => setDateTo(date) // minDate={dateFrom}\n            ,\n            showTimeSelect: true,\n            showTimeSelectOnly: true,\n            timeIntervals: 30,\n            timeCaption: \"Time\",\n            dateFormat: \"HH:mm\",\n            timeFormat: \"HH:mm\",\n            minTime: dateFrom,\n            maxTime: endHour\n          })\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: style.contButtons,\n      children: [/*#__PURE__*/_jsx(\"button\", {\n        className: style.buttonCancel,\n        onClick: () => setStateModal(false),\n        type: \"button\",\n        children: /*#__PURE__*/_jsx(TagLang, {\n          group: \"button\",\n          tag: \"cancel\"\n        })\n      }), /*#__PURE__*/_jsx(\"button\", {\n        className: style.buttonAccept,\n        type: \"submit\",\n        children: /*#__PURE__*/_jsx(TagLang, {\n          group: \"button\",\n          tag: \"accept\"\n        })\n      })]\n    })]\n  });\n}\n\nfunction initialValues() {\n  return {\n    weekday: \"\",\n    fromTime: \"\",\n    toTime: \"\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    weekday: Yup.string().required(\"required\"),\n    fromTime: Yup.string().required(\"required\"),\n    toTime: Yup.string().required(\"required\")\n  };\n}","map":null,"metadata":{},"sourceType":"module"}