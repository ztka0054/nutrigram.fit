{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Modal } from \"reactstrap\";\nimport IconClose from \"../../../../../components/Icons/Close\";\nimport TagLang from \"../../../../../modules/GetTagLang\";\nimport request from \"../../../../../../helper/core_services/core/requestService\";\nimport ApiAppoinments from \"../../../../../../helper/core_services/endpoints/appointments\";\nimport style from \"./modal.module.scss\";\nexport default function ModalDelete(_ref) {\n  var active = _ref.active,\n      deactive = _ref.deactive,\n      unavalivilityObject = _ref.unavalivilityObject,\n      setRefresh = _ref.setRefresh;\n  var router = useRouter();\n\n  var _useState = useState(false),\n      stateModal = _useState[0],\n      setStateModal = _useState[1];\n\n  useEffect(function () {\n    if (active) setStateModal(true);\n  }, [active]);\n  useEffect(function () {\n    if (deactive) setStateModal(false);\n  }, [deactive]);\n\n  var DeleteElement = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return request(ApiAppoinments.delete_unavailabilities, null, [unavalivilityObject === null || unavalivilityObject === void 0 ? void 0 : unavalivilityObject.id], {\n                locale: router === null || router === void 0 ? void 0 : router.locale\n              });\n\n            case 2:\n              result = _context.sent;\n\n              if (result) {\n                setRefresh(true);\n                setStateModal(false);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function DeleteElement() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(Modal, {\n    centered: true,\n    isOpen: stateModal,\n    toggle: function toggle() {\n      return setStateModal(false);\n    },\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: style.modalContent,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: style.header,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.titleModal,\n          children: /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"modal_delete_2_quotes\"\n            })\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: style.close,\n          onClick: function onClick() {\n            return setStateModal(false);\n          },\n          children: /*#__PURE__*/_jsx(IconClose, {})\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: style.messageDelete,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"modal_delete_1_quotes\"\n          })\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: style.contButtons,\n        children: [/*#__PURE__*/_jsx(\"button\", {\n          className: style.buttonCancel,\n          onClick: function onClick() {\n            return setStateModal(false);\n          },\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"button\",\n            tag: \"cancel\"\n          })\n        }), /*#__PURE__*/_jsx(\"button\", {\n          className: style.buttonAccept,\n          onClick: function onClick() {\n            return DeleteElement();\n          },\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"button\",\n            tag: \"accept\"\n          })\n        })]\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}