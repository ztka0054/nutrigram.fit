{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { map, size, differenceBy } from \"lodash\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport * as Yup from \"yup\";\nimport TagLang from \"../../../../modules/GetTagLang\";\nimport SelectLanguage from \"../../../../components/SelectLanguage\";\nimport InputText from \"../../../../components/Inputs/InputTypeForm_1/InputTextForm_1\";\nimport InputNumber from \"../../../../components/Inputs/InputTypeForm_1/InputNumber_1\";\nimport InputSelect from \"../../../../components/Inputs/InputTypeForm_1/InputSelectForm_1\";\nimport GetLanguage from \"../../../../../helper/i18n/getValueTagLang\";\nimport request from \"../../../../../helper/core_services/core/requestService\";\nimport apiFoods from \"../../../../../helper/core_services/endpoints/foods\";\nimport { loadElement } from \"../../../../../helper/appearance/load\";\nimport ScrollError from \"../../../../../helper/scroll/ScrollError\";\nimport PortionElementForm from \"./PortionElementForm\";\nvar icon_title = \"/static/img/favicons/app/icon_nu_1.png\";\nexport default function NewRecipe(_ref) {\n  var _formik$errors;\n\n  var _ref$dataFood = _ref.dataFood,\n      dataFood = _ref$dataFood === void 0 ? null : _ref$dataFood;\n  var router = useRouter();\n\n  var _useState = useState(1),\n      statusLanguage = _useState[0],\n      setStatusLanguage = _useState[1];\n\n  var _useState2 = useState([]),\n      catalogueCategories = _useState2[0],\n      setCatalogueCategories = _useState2[1];\n\n  var _useState3 = useState([]),\n      cataloguePortionsInfo = _useState3[0],\n      setCataloguePortionsInfo = _useState3[1];\n\n  var formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData, _ref2) {\n        var resetForm;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref2.resetForm;\n                if (formData.fiber == \"\") delete formData.fiber;\n                if (formData.vitaminA == \"\") delete formData.vitaminA;\n                if (formData.ascorbicAcid == \"\") delete formData.ascorbicAcid;\n                if (formData.folicAcid == \"\") delete formData.folicAcid;\n                if (formData.hemIron == \"\") delete formData.hemIron;\n                if (formData.nonHemIron == \"\") delete formData.nonHemIron;\n                if (formData.potassium == \"\") delete formData.potassium;\n                if (formData.glycemicIndex == \"\") delete formData.glycemicIndex;\n                if (formData.glycemicLoad == \"\") delete formData.glycemicLoad;\n                if (formData.sugarByEquivalent == \"\") delete formData.sugarByEquivalent;\n                if (formData.calcium == \"\") delete formData.calcium;\n                if (formData.sodium == \"\") delete formData.sodium;\n                if (formData.selenium == \"\") delete formData.selenium;\n                if (formData.phosphorus == \"\") delete formData.phosphorus;\n                if (formData.cholesterol == \"\") delete formData.cholesterol;\n                if (formData.saturatedFattyAcids == \"\") delete formData.saturatedFattyAcids;\n                if (formData.monounsaturatedFattyAcids == \"\") delete formData.monounsaturatedFattyAcids;\n                if (formData.polyunsaturatedFattyAcids == \"\") delete formData.polyunsaturatedFattyAcids;\n                if (formData.ethanol == \"\") delete formData.ethanol;\n                loadElement(true);\n                if (!(formData !== null && formData !== void 0 && formData.id)) CreateFood(formData);\n                if (formData !== null && formData !== void 0 && formData.id) UpdateFood(formData);\n                loadElement(false);\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSubmit(_x, _x2) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n  useEffect(function () {\n    if (dataFood != null) LoadData();\n  }, [dataFood]);\n\n  var LoadData = function LoadData() {\n    var _newData$names, _newData$names2;\n\n    var newData = _objectSpread({}, dataFood);\n\n    newData.name_es = newData === null || newData === void 0 ? void 0 : (_newData$names = newData.names) === null || _newData$names === void 0 ? void 0 : _newData$names.es;\n    newData.name_en = newData === null || newData === void 0 ? void 0 : (_newData$names2 = newData.names) === null || _newData$names2 === void 0 ? void 0 : _newData$names2[\"en-us\"];\n    newData.portions = map(dataFood.portions, function (portion, index) {\n      var defaultPortion = false;\n\n      if (portion.id == dataFood.defaultPortion) {\n        newData.loadValueCheck = index;\n        defaultPortion = true;\n      }\n\n      return _objectSpread(_objectSpread({}, portion), {}, {\n        defaultPortion: defaultPortion\n      });\n    });\n    delete newData.name;\n    formik.setValues(newData);\n  };\n\n  var CreateFood = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(formData) {\n      var newForm, resultFood;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              newForm = _objectSpread({\n                name: {\n                  \"en-us\": formData.name_en,\n                  es: formData.name_es\n                }\n              }, formData);\n              _context2.next = 3;\n              return request(apiFoods.post_create_food, newForm, null, {\n                locale: router.locale\n              });\n\n            case 3:\n              resultFood = _context2.sent;\n\n              if (resultFood != null) {\n                CreatePortions(formData, resultFood);\n                router.push(\"/dashboard/equivalents\");\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function CreateFood(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var UpdateFood = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(formData) {\n      var newForm, resultFood;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              newForm = _objectSpread({\n                name: {\n                  \"en-us\": formData.name_en,\n                  es: formData.name_es\n                }\n              }, formData);\n              _context3.next = 3;\n              return request(apiFoods.patch_food, newForm, [dataFood === null || dataFood === void 0 ? void 0 : dataFood.id], {\n                locale: router.locale\n              });\n\n            case 3:\n              resultFood = _context3.sent;\n\n              if (resultFood != null) {\n                CreatePortions(formData, resultFood);\n                UpdatePortions(formData, resultFood);\n                DeletePortion(formData);\n                router.push(\"/dashboard/equivalents/data/\".concat(router.query.id_category));\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function UpdateFood(_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var DeletePortion = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(formData) {\n      var filterId, DeleteElements, arrayRequest;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              filterId = formData.portions.filter(function (obj) {\n                return obj === null || obj === void 0 ? void 0 : obj.id;\n              });\n              DeleteElements = differenceBy(dataFood.portions, filterId, \"id\");\n              arrayRequest = [];\n              map(DeleteElements, function (element) {\n                arrayRequest.push(request(apiFoods.del_potion, null, [element.id], {\n                  locale: router.locale\n                }));\n              });\n              _context4.next = 6;\n              return Promise.all(arrayRequest);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function DeletePortion(_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var CreatePortions = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(formData, resultFood) {\n      var deafultPortion, arrayRequest, filterId, resultPortions, params;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              deafultPortion = null;\n              arrayRequest = [];\n              filterId = formData.portions.filter(function (obj) {\n                return !(obj !== null && obj !== void 0 && obj.id);\n              });\n              map(filterId, function (element, index) {\n                if (element.defaultPortion) {\n                  deafultPortion = index;\n                }\n\n                arrayRequest.push(request(apiFoods.post_portion, _objectSpread({\n                  food: resultFood.id\n                }, element), null, {\n                  locale: router.locale\n                }));\n              });\n              _context5.next = 6;\n              return Promise.all(arrayRequest);\n\n            case 6:\n              resultPortions = _context5.sent;\n              params = _objectSpread({}, resultFood);\n\n              if (!(deafultPortion != null)) {\n                _context5.next = 12;\n                break;\n              }\n\n              params.defaultPortion = resultPortions[deafultPortion].id;\n              _context5.next = 12;\n              return request(apiFoods.put_food, params, [resultFood.id], {\n                locale: router.locale\n              });\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function CreatePortions(_x6, _x7) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var UpdatePortions = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(formData, resultFood) {\n      var deafultPortion, arrayRequest, filterId, params;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              deafultPortion = null;\n              arrayRequest = [];\n              filterId = formData.portions.filter(function (obj) {\n                return obj === null || obj === void 0 ? void 0 : obj.id;\n              });\n              map(filterId, function (element, index) {\n                if (element.defaultPortion) {\n                  deafultPortion = index;\n                }\n\n                arrayRequest.push(request(apiFoods.patch_potion, _objectSpread({\n                  food: resultFood.id\n                }, element), [element.id], {\n                  locale: router.locale\n                }));\n              });\n              _context6.next = 6;\n              return Promise.all(arrayRequest);\n\n            case 6:\n              params = _objectSpread({}, resultFood);\n\n              if (!(deafultPortion != null)) {\n                _context6.next = 11;\n                break;\n              }\n\n              params.defaultPortion = filterId[deafultPortion].id;\n              _context6.next = 11;\n              return request(apiFoods.put_food, params, [resultFood.id], {\n                locale: router.locale\n              });\n\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function UpdatePortions(_x8, _x9) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (router !== null && router !== void 0 && router.locale) {\n      GetCatalogueCategories();\n      GetTypePortionInfo();\n    }\n  }, [router.locale]);\n\n  var GetCatalogueCategories = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return request(apiFoods.get_food_categories, null, null, {\n                locale: router.locale\n              });\n\n            case 2:\n              result = _context7.sent;\n\n              if (result != null) {\n                setCatalogueCategories(result.result);\n              }\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function GetCatalogueCategories() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var GetTypePortionInfo = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var result, resultNew;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return request(apiFoods.get_portions_info, null, null, {\n                locale: router.locale\n              });\n\n            case 2:\n              result = _context8.sent;\n\n              if (result != null) {\n                resultNew = map(result.result, function (element) {\n                  var name = \"\";\n                  if (router.locale == \"es\") name = element.name[\"es\"];\n                  if (router.locale == \"en\") name = element.name[\"en-us\"];\n                  element.name = name;\n                  return element;\n                });\n                setCataloguePortionsInfo(resultNew);\n              }\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function GetTypePortionInfo() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var ClickSend = function ClickSend() {\n    ScrollError();\n  };\n\n  return /*#__PURE__*/_jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"col-6\",\n        children: [/*#__PURE__*/_jsx(SelectLanguage, {\n          formik: formik,\n          statusLanguage: statusLanguage,\n          setStatusLanguage: setStatusLanguage,\n          error: formik === null || formik === void 0 ? void 0 : (_formik$errors = formik.errors) === null || _formik$errors === void 0 ? void 0 : _formik$errors.language,\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-cont-input-2\",\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-tag\",\n              children: [\"* \", /*#__PURE__*/_jsx(TagLang, {\n                group: \"input\",\n                tag: \"name\"\n              })]\n            }), statusLanguage == 1 && /*#__PURE__*/_jsx(\"div\", {\n              className: \"sty-input\",\n              children: /*#__PURE__*/_jsx(\"input\", {\n                name: \"name_es\",\n                type: \"text\",\n                value: formik.values.name_es,\n                onChange: formik.handleChange\n              })\n            }), statusLanguage == 2 && /*#__PURE__*/_jsx(\"div\", {\n              className: \"sty-input\",\n              children: /*#__PURE__*/_jsx(\"input\", {\n                name: \"name_en\",\n                type: \"text\",\n                value: formik.values.name_en,\n                onChange: formik.handleChange\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"margin-top-2\",\n          children: /*#__PURE__*/_jsx(InputSelect, {\n            formik: formik,\n            title: \"category\",\n            name: \"category\",\n            value: formik.values.category,\n            error: formik.errors.category,\n            elements: catalogueCategories,\n            required: true\n          })\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"weight\",\n          name: \"weight\",\n          value: formik.values.weight,\n          error: formik.errors.weight,\n          required: true\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"grossWeight\",\n          name: \"grossWeight\",\n          value: formik.values.grossWeight,\n          error: formik.errors.grossWeight,\n          required: true\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"calories\",\n          name: \"calories\",\n          value: formik.values.calories,\n          error: formik.errors.calories,\n          required: true\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"protein\",\n          name: \"protein\",\n          value: formik.values.protein,\n          error: formik.errors.protein,\n          required: true\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"lipids\",\n          name: \"lipids\",\n          value: formik.values.lipids,\n          error: formik.errors.lipids,\n          required: true\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"carbohydrates\",\n          name: \"carbohydrates\",\n          value: formik.values.carbohydrates,\n          error: formik.errors.carbohydrates,\n          required: true\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"fiber\",\n          name: \"fiber\",\n          value: formik.values.fiber,\n          error: formik.errors.fiber\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"vitaminA\",\n          name: \"vitaminA\",\n          value: formik.values.vitaminA,\n          error: formik.errors.vitaminA\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"ascorbicAcid\",\n          name: \"ascorbicAcid\",\n          value: formik.values.ascorbicAcid,\n          error: formik.errors.ascorbicAcid\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"folicAcid\",\n          name: \"folicAcid\",\n          value: formik.values.folicAcid,\n          error: formik.errors.folicAcid\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"hemIron\",\n          name: \"hemIron\",\n          value: formik.values.hemIron,\n          error: formik.errors.hemIron\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"nonHemIron\",\n          name: \"nonHemIron\",\n          value: formik.values.nonHemIron,\n          error: formik.errors.nonHemIron\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"potassium\",\n          name: \"potassium\",\n          value: formik.values.potassium,\n          error: formik.errors.potassium\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"glycemicIndex\",\n          name: \"glycemicIndex\",\n          value: formik.values.glycemicIndex,\n          error: formik.errors.glycemicIndex\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"glycemicLoad\",\n          name: \"glycemicLoad\",\n          value: formik.values.glycemicLoad,\n          error: formik.errors.glycemicLoad\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"sugarByEquivalent\",\n          name: \"sugarByEquivalent\",\n          value: formik.values.sugarByEquivalent,\n          error: formik.errors.sugarByEquivalent\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"calcium\",\n          name: \"calcium\",\n          value: formik.values.calcium,\n          error: formik.errors.calcium\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"sodium\",\n          name: \"sodium\",\n          value: formik.values.sodium,\n          error: formik.errors.sodium\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"selenium\",\n          name: \"selenium\",\n          value: formik.values.selenium,\n          error: formik.errors.selenium\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"phosphorus\",\n          name: \"phosphorus\",\n          value: formik.values.phosphorus,\n          error: formik.errors.phosphorus\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"cholesterol\",\n          name: \"cholesterol\",\n          value: formik.values.cholesterol,\n          error: formik.errors.cholesterol\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"saturatedFattyAcids\",\n          name: \"saturatedFattyAcids\",\n          value: formik.values.saturatedFattyAcids,\n          error: formik.errors.saturatedFattyAcids\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"monounsaturatedFattyAcids\",\n          name: \"monounsaturatedFattyAcids\",\n          value: formik.values.monounsaturatedFattyAcids,\n          error: formik.errors.monounsaturatedFattyAcids\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"polyunsaturatedFattyAcids\",\n          name: \"polyunsaturatedFattyAcids\",\n          value: formik.values.polyunsaturatedFattyAcids,\n          error: formik.errors.polyunsaturatedFattyAcids\n        }), /*#__PURE__*/_jsx(InputNumber, {\n          formik: formik,\n          title: \"ethanol\",\n          name: \"ethanol\",\n          value: formik.values.ethanol,\n          error: formik.errors.ethanol\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"col-6\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-title-secction-1\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"text\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"portions\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"icon\",\n            children: /*#__PURE__*/_jsx(\"img\", {\n              src: icon_title\n            })\n          })]\n        }), /*#__PURE__*/_jsx(FormikProvider, {\n          value: formik,\n          children: /*#__PURE__*/_jsx(FieldArray, {\n            name: \"portions\",\n            render: function render(arrayHelpers) {\n              return /*#__PURE__*/_jsx(PortionElementForm, {\n                formik: formik,\n                arrayHelpers: arrayHelpers,\n                father: \"portions\",\n                cataloguePortionsInfo: cataloguePortionsInfo\n              });\n            }\n          })\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12 text-center sty-magin-b-1\",\n        children: /*#__PURE__*/_jsxs(\"button\", {\n          className: \"sty-button-dash-1\",\n          type: \"submit\",\n          onClick: function onClick() {\n            return ClickSend();\n          },\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-icon\",\n            children: /*#__PURE__*/_jsx(\"img\", {\n              src: \"/static/img/favicons/app/save_w.svg\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"button\",\n              tag: \"save\"\n            })\n          })]\n        })\n      })]\n    })\n  });\n}\n\nfunction initialValues() {\n  return {\n    name_es: \"\",\n    name_en: \"\",\n    category: \"\",\n    weight: \"\",\n    grossWeight: \"\",\n    calories: \"\",\n    protein: \"\",\n    lipids: \"\",\n    carbohydrates: \"\",\n    fiber: \"\",\n    vitaminA: \"\",\n    ascorbicAcid: \"\",\n    folicAcid: \"\",\n    hemIron: \"\",\n    nonHemIron: \"\",\n    potassium: \"\",\n    glycemicIndex: \"\",\n    glycemicLoad: \"\",\n    sugarByEquivalent: \"\",\n    calcium: \"\",\n    sodium: \"\",\n    selenium: \"\",\n    phosphorus: \"\",\n    cholesterol: \"\",\n    saturatedFattyAcids: \"\",\n    monounsaturatedFattyAcids: \"\",\n    polyunsaturatedFattyAcids: \"\",\n    ethanol: \"\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    // language: Yup.bool().when([\"name_es\", \"name_en\"], {\n    //     is: (name_es, name_en) =>\n    //         (!name_es && !name_en) || (!!name_es && !!name_en),\n    //     then: Yup.bool().required(\"fields_language\"),\n    //     otherwise: Yup.bool(),\n    // }),\n    language: Yup.bool().when([\"name_es\", \"name_en\"], {\n      is: function is(name_es, name_en) {\n        return !name_es && !name_en;\n      },\n      then: Yup.bool().required(\"fields_language\"),\n      otherwise: Yup.bool()\n    }),\n    category: Yup.string().required(\"required\"),\n    weight: Yup.string().required(\"required\"),\n    grossWeight: Yup.string().required(\"required\"),\n    calories: Yup.string().required(\"required\"),\n    protein: Yup.string().required(\"required\"),\n    lipids: Yup.string().required(\"required\"),\n    carbohydrates: Yup.string().required(\"required\"),\n    // fiber: Yup.string().required(\"required\"),\n    // vitaminA: Yup.string().required(\"required\"),\n    // ascorbicAcid: Yup.string().required(\"required\"),\n    // folicAcid: Yup.string().required(\"required\"),\n    // hemIron: Yup.string().required(\"required\"),\n    // nonHemIron: Yup.string().required(\"required\"),\n    // potassium: Yup.string().required(\"required\"),\n    // glycemicIndex: Yup.string().required(\"required\"),\n    // glycemicLoad: Yup.string().required(\"required\"),\n    // sugarByEquivalent: Yup.string().required(\"required\"),\n    // calcium: Yup.string().required(\"required\"),\n    // sodium: Yup.string().required(\"required\"),\n    // selenium: Yup.string().required(\"required\"),\n    // phosphorus: Yup.string().required(\"required\"),\n    // cholesterol: Yup.string().required(\"required\"),\n    // saturatedFattyAcids: Yup.string().required(\"required\"),\n    // monounsaturatedFattyAcids: Yup.string().required(\"required\"),\n    // polyunsaturatedFattyAcids: Yup.string().required(\"required\"),\n    // ethanol: Yup.string().required(\"required\"),\n    portions: Yup.array().of(Yup.object().shape({\n      info: Yup.string().required(\"required\"),\n      weight: Yup.string().required(\"required\"),\n      suggestedQuantity: Yup.string().required(\"required\")\n    })).min(1, \"array_ingredients\").required(\"array_ingredients\")\n  };\n}","map":null,"metadata":{},"sourceType":"module"}