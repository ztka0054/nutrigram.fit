{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport * as Yup from \"yup\";\nimport { map, size } from \"lodash\";\nimport moment from \"moment\";\nimport useApp from \"../../../../../../../../hooks/useApp\";\nimport TagLang from \"../../../../../../../modules/GetTagLang\";\nimport MessageValidation from \"../../../../../../../modules/Forms/MessageValidation\";\nimport request from \"../../../../../../../../helper/core_services/core/requestService\";\nimport consulation from \"../../../../../../../../helper/core_services/endpoints/consulation\";\nimport patient from \"../../../../../../../../helper/core_services/endpoints/patients\";\nimport apiMenu from \"../../../../../../../../helper/core_services/endpoints/menu\";\nimport Getlanguage from \"../../../../../../../../helper/i18n/getValueTagLang\";\nimport { harris, mifflin, owen, oms, average } from \"../../../../../../../../helper/calculations/energy\";\nimport fixDate from \"../../../../../../../../helper/date/fixDateTimeService\";\nimport { message_1 } from \"../../../../../../../../helper/appearance/messages\";\nimport { loadElement } from \"../../../../../../../../helper/appearance/load\";\nimport FieldRadio from \"../../../../../../../../helper/forms/elements/radio\";\nimport InputTextForm_1 from \"../../../../../../../../components/components/Inputs/InputTypeForm_1/InputTextForm_1\";\nimport InputTextAreaForm_1 from \"../../../../../../../../components/components/Inputs/InputTypeForm_1/InputTextAreaForm_1\";\nimport InputTimeForm_1 from \"../../../../../../../../components/components/Inputs/InputTypeForm_1/InputTimeForm_1\";\nimport InputDate_1 from \"../../../../../../../../components/components/Inputs/InputTypeForm_1/InputDate_1\";\nimport FormContQuestionnarie from \"./FormContQuestionnarie\";\nimport FormContAntrophometric from \"./FormContAntrophometric\";\nimport FormContFolds from \"./FormContFolds\";\nimport FormContFoldsCircunferences from \"./FormContFoldsCircunferences\";\nimport SectionMenu from \"../SectionMenu\";\nimport getTimeZoneDate from \"../../../../../../../../helper/date/getTimeZoneDate\";\nimport ScrollError from \"../../../../../../../../helper/scroll/ScrollError\";\nconst icon_title = \"/static/img/favicons/app/icon_nu_1.png\";\nconst idAntropo = 0;\nconst idFolds = 1;\nconst idCircum = 2;\nexport default function FormConsulation({\n  idConsulation,\n  ShowConsults,\n  dataPatient,\n  setRefreshPatient,\n  dataMenuPatient\n}) {\n  const {\n    query,\n    locale\n  } = useRouter();\n  const {\n    putFlagChangeElement\n  } = useApp();\n  const {\n    0: flagSettings,\n    1: setFlagSettings\n  } = useState({});\n  const {\n    0: valuesActivity,\n    1: setValuesActivity\n  } = useState([]);\n  const {\n    0: averageEnergy,\n    1: setAverageEnergy\n  } = useState(0);\n  const {\n    0: flagFollow,\n    1: setFlagFollow\n  } = useState(false);\n  const {\n    0: stateConsult,\n    1: setStateConsult\n  } = useState(1);\n  const {\n    0: dataMenu,\n    1: setDataMenu\n  } = useState(null);\n  const {\n    0: nameMenu,\n    1: setNameMenu\n  } = useState(null);\n  const {\n    0: dataConsulation,\n    1: setDataConsulation\n  } = useState(null);\n  const formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData, {\n      resetForm\n    }) => {\n      if (idConsulation == null) SendForm(formData, resetForm);\n      if (idConsulation != null) SendUpdate(formData, resetForm);\n      setRefreshPatient(true);\n    }\n  });\n\n  const SendForm = async (formData, resetForm) => {\n    let newData = _objectSpread({}, formData);\n\n    let menuPatient = await SaveMenu();\n    if (menuPatient != null) newData.patientMenu = menuPatient;\n    newData.datetime = getTimeZoneDate(`${newData.date}T${newData.hour}`);\n    console.log(`${newData.date}T${newData.hour}`);\n    loadElement(true);\n    let reqConsulation = await request(consulation.post_consulation, newData, [query.id], {\n      locale\n    });\n\n    if (reqConsulation != null) {\n      let paramsAntropo = {\n        consultation: reqConsulation.id,\n        datetime: newData.datetime,\n        measurements: [...formData.anthropometrys, ...formData.folds, ...formData.circumferences]\n      };\n      await request(consulation.post_anthropometry, paramsAntropo, [query.id], {\n        locale\n      });\n      let arrayRequest = [];\n      map([...formData.anthropometrys, ...formData.folds, ...formData.circumferences], element => {\n        let paramTrait = {\n          trait: element.trait,\n          goal: element.goal\n        };\n        if (element !== null && element !== void 0 && element.id) arrayRequest.push(request(consulation.patch_trait_patient, paramTrait, [query.id, element.id], {\n          locale\n        }));\n        if (!(element !== null && element !== void 0 && element.id)) arrayRequest.push(request(consulation.post_trait_patient, paramTrait, [query.id], {\n          locale\n        }));\n      });\n      await Promise.all(arrayRequest);\n      loadElement(false);\n      ShowConsults();\n      putFlagChangeElement();\n      message_1(Getlanguage(\"validation\", \"message_1\"));\n    }\n\n    setRefreshPatient(true);\n    resetForm();\n  };\n\n  const SendUpdate = async formData => {\n    let newData = _objectSpread({}, formData);\n\n    delete newData.anthropometrys;\n    delete newData.folds;\n    delete newData.circumferences;\n    newData.datetime = getTimeZoneDate(`${newData.date}T${moment(newData.hour).format(\"HH:mm:ss\")}`);\n    loadElement(true);\n    let reqConsulation = await request(consulation.patch_consulation, newData, [query.id, idConsulation], {\n      locale\n    });\n    let arrayRequest = [];\n\n    if (reqConsulation != null) {\n      let paramsAntropo = {\n        consultation: reqConsulation.id,\n        datetime: newData.datetime,\n        measurements: [...formData.anthropometrys, ...formData.folds, ...formData.circumferences]\n      };\n      await request(consulation.patch_anthropometry, paramsAntropo, [query.id, newData.idAnthropometry], {\n        locale\n      });\n      map([...formData.anthropometrys, ...formData.folds, ...formData.circumferences], element => {\n        let paramTrait = {\n          trait: element.trait,\n          goal: element.goal\n        };\n        arrayRequest.push(request(consulation.patch_trait_patient, paramTrait, [query.id, element.id], {\n          locale\n        }));\n      });\n    }\n\n    await Promise.all(arrayRequest);\n    loadElement(false);\n    ShowConsults();\n    putFlagChangeElement();\n    message_1(Getlanguage(\"validation\", \"message_1\"));\n    setRefreshPatient(true);\n    resetForm();\n  };\n\n  useEffect(() => {\n    GetCuestionnarie();\n    GetValuesActivity();\n  }, [locale]);\n  useEffect(() => {\n    if (query !== null && query !== void 0 && query.id) ValidateFirstConsulation();\n  }, [query]);\n\n  const ValidateFirstConsulation = async () => {\n    let reqConsultation = await request(consulation.get_consulations, {\n      page_size: 1\n    }, [query.id], {\n      locale\n    }); // let finf;\n\n    if (size(reqConsultation.result) > 0) setFlagFollow(true);\n  };\n\n  useEffect(() => {\n    if (query !== null && query !== void 0 && query.id) {\n      if (idConsulation != null) GetDataUpdate();else GetTraits(query.id);\n    }\n  }, [query, locale, idConsulation]);\n  useEffect(() => {\n    GetSettings();\n  }, []);\n  useEffect(() => {\n    if (dataPatient != null) EnergyCalculation();\n  }, [dataPatient, flagSettings, formik.values.anthropometrys]);\n  useEffect(() => {\n    PhisicalActivity();\n  }, [averageEnergy, formik.values]);\n\n  const GetDataUpdate = async () => {\n    let req = await request(consulation.get_consulation, null, [query.id, idConsulation], {\n      locale\n    });\n\n    if (req != null) {\n      setDataConsulation(req);\n      let answers = map(req.answers, element => {\n        return {\n          question_tag: element.question.question,\n          question: element.question.id,\n          answer: element.answer\n        };\n      });\n      let values = {\n        date: fixDate(req.datetime).format(\"YYYY-MM-DD\"),\n        hour: fixDate(req.datetime).toDate(),\n        notes: req.notes,\n        activity: req.activity,\n        answers,\n        idAnthropometry: req.anthropometry.id\n      };\n      let traitsPatient = await request(consulation.get_traits_patient, null, [query.id], {\n        locale\n      });\n      let arrayAntropo = [];\n      let arrayFolds = [];\n      let arrayCircumf = [];\n      map(traitsPatient, element => {\n        let finder = req.anthropometry.measurements.find(obj => {\n          return obj.trait.id === element.trait.id;\n        });\n\n        if (finder != undefined) {\n          let params = {\n            id: element.id,\n            trait: element.trait.id,\n            traitName: element.trait.name,\n            supportsGoal: element.trait.supportsGoal,\n            identifier: element.trait.identifier,\n            value: finder.value,\n            goal: element.goal\n          };\n          if (element.trait.group == idAntropo) arrayAntropo.push(params);\n          if (element.trait.group == idFolds) arrayFolds.push(params);\n          if (element.trait.group == idCircum) arrayCircumf.push(params);\n        }\n      });\n      values.anthropometrys = arrayAntropo;\n      values.folds = arrayFolds;\n      values.circumferences = arrayCircumf;\n      formik.setValues(values);\n      GetActualValuesUpdate(fixDate(req.datetime).format(\"YYYY-MM-DD\"), arrayAntropo, arrayFolds, arrayCircumf);\n    }\n  };\n\n  const GetValuesActivity = () => {\n    setValuesActivity([{\n      tag: Getlanguage(\"input\", \"light\"),\n      value: \"1\"\n    }, {\n      tag: Getlanguage(\"input\", \"moderate\"),\n      value: \"2\"\n    }, {\n      tag: Getlanguage(\"input\", \"heavy\"),\n      value: \"3\"\n    }]);\n  };\n\n  const GetSettings = async () => {\n    let req = await request(consulation.get_settings, null, null, {\n      locale\n    });\n\n    if (req != null) {\n      setFlagSettings(req);\n    }\n  };\n\n  const GetCuestionnarie = async () => {\n    let req = await request(consulation.get_questions, null, null, {\n      locale\n    });\n    let questions = map(req, (element, index) => {\n      return {\n        question_tag: element.question,\n        question: element.id\n      };\n    });\n    formik.setFieldValue(\"answers\", questions);\n  };\n\n  const GetTraits = async idPatient => {\n    let traits = await request(consulation.get_traits, null, null, locale);\n    let traitsPatient = await request(consulation.get_traits_patient, null, [idPatient], {\n      locale\n    });\n\n    if (traits != null) {\n      let arrayAntropo = [];\n      let arrayFolds = [];\n      let arrayCircumf = [];\n      map(traits, (element, i) => {\n        let params = {\n          trait: element.id,\n          traitName: element.name,\n          supportsGoal: element.supportsGoal,\n          identifier: element.identifier,\n          past: 0,\n          value: 0,\n          goal: 0\n        };\n        let find = traitsPatient.find(obj => {\n          return obj.trait.id === element.id;\n        });\n\n        if (find != undefined) {\n          params.id = find.id;\n          params.goal = find.goal;\n        }\n\n        if (element.group == idAntropo) arrayAntropo.push(params);\n        if (element.group == idFolds) arrayFolds.push(params);\n        if (element.group == idCircum) arrayCircumf.push(params);\n      });\n      formik.setFieldValue(\"anthropometrys\", arrayAntropo);\n      formik.setFieldValue(\"folds\", arrayFolds);\n      formik.setFieldValue(\"circumferences\", arrayCircumf);\n      GetActualValues(arrayAntropo, arrayFolds, arrayCircumf);\n    }\n  };\n\n  const GetActualValues = async (arrayAntropo, arrayFolds, arrayCircumf) => {\n    let reqLast = await request(consulation.get_consulations, {\n      ordering: \"-datetime\",\n      // datetime__lt: `${date}T23:59:59`,\n      page_size: 1\n    }, [query.id], {\n      locale\n    });\n\n    if (reqLast != null) {\n      if (size(reqLast.result) > 0) {\n        let req = await request(consulation.get_consulation, null, [query.id, reqLast.result[0].id], {\n          locale\n        });\n\n        if (req != null) {\n          map(arrayAntropo, (element, index) => {\n            let find = req.anthropometry.measurements.find(obj => {\n              return obj.trait.id === element.trait;\n            });\n\n            if (find != undefined) {\n              if (element.supportsGoal) formik.setFieldValue(`anthropometrys[${index}].past`, find.value);\n              if (!element.supportsGoal) formik.setFieldValue(`anthropometrys[${index}].value`, find.value);\n            }\n          });\n          map(arrayFolds, (element, index) => {\n            let find = req.anthropometry.measurements.find(obj => {\n              return obj.trait.id === element.trait;\n            });\n\n            if (find != undefined) {\n              if (element.supportsGoal) formik.setFieldValue(`folds[${index}].past`, find.value);\n              if (!element.supportsGoal) formik.setFieldValue(`folds[${index}].value`, find.value);\n            }\n          });\n          map(arrayCircumf, (element, index) => {\n            let find = req.anthropometry.measurements.find(obj => {\n              return obj.trait.id === element.trait;\n            });\n\n            if (find != undefined) {\n              if (element.supportsGoal) formik.setFieldValue(`circumferences[${index}].past`, find.value);\n              if (!element.supportsGoal) formik.setFieldValue(`circumferences[${index}].value`, find.value);\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const GetActualValuesUpdate = async (date, arrayAntropo, arrayFolds, arrayCircumf) => {\n    let reqLast = await request(consulation.get_consulations, {\n      ordering: \"-datetime\",\n      datetime__lt: `${date}T00:00:00`,\n      page_size: 1\n    }, [query.id], {\n      locale\n    });\n    if (reqLast != null) if (size(reqLast.result) > 0) {\n      let req = await request(consulation.get_consulation, null, [query.id, reqLast.result[0].id], {\n        locale\n      });\n\n      if (req != null) {\n        map(arrayAntropo, (element, index) => {\n          let find = req.anthropometry.measurements.find(obj => {\n            return obj.trait.id === element.trait;\n          });\n\n          if (find != undefined) {\n            if (element.supportsGoal) formik.setFieldValue(`anthropometrys[${index}].past`, find.value);\n          }\n        });\n        map(arrayFolds, (element, index) => {\n          let find = req.anthropometry.measurements.find(obj => {\n            return obj.trait.id === element.trait;\n          });\n\n          if (find != undefined) {\n            if (element.supportsGoal) formik.setFieldValue(`folds[${index}].past`, find.value);\n          }\n        });\n        map(arrayCircumf, (element, index) => {\n          let find = req.anthropometry.measurements.find(obj => {\n            return obj.trait.id === element.trait;\n          });\n\n          if (find != undefined) {\n            if (element.supportsGoal) formik.setFieldValue(`circumferences[${index}].past`, find.value);\n          }\n        });\n      }\n    }\n  };\n\n  const EnergyCalculation = () => {\n    let arrayAverage = [];\n    let height = formik === null || formik === void 0 ? void 0 : formik.values[\"anthropometrys\"].find(obj => {\n      return obj.identifier == 1;\n    });\n    let weight = formik === null || formik === void 0 ? void 0 : formik.values[\"anthropometrys\"].find(obj => {\n      return obj.identifier == 2;\n    });\n\n    if (height != undefined && weight != undefined) {\n      if (flagSettings !== null && flagSettings !== void 0 && flagSettings.harris) {\n        let valHarris = harris(dataPatient.gender, weight.value, height.value, dataPatient.age);\n        formik.setFieldValue(\"harris\", valHarris.toFixed(2));\n        arrayAverage.push(valHarris);\n      }\n\n      if (flagSettings !== null && flagSettings !== void 0 && flagSettings.mifflin) {\n        let valMifflin = mifflin(dataPatient.gender, weight.value, height.value, dataPatient.age);\n        formik.setFieldValue(\"mifflin\", valMifflin.toFixed(2));\n        arrayAverage.push(valMifflin);\n      }\n\n      if (flagSettings !== null && flagSettings !== void 0 && flagSettings.owen) {\n        let valOwen = owen(dataPatient.gender, weight.value);\n        formik.setFieldValue(\"owen\", valOwen.toFixed(2));\n        arrayAverage.push(valOwen);\n      }\n\n      if (flagSettings !== null && flagSettings !== void 0 && flagSettings.fao) {\n        let valOMS = oms(dataPatient.gender, weight.value, dataPatient.age);\n        formik.setFieldValue(\"fao\", valOMS.toFixed(2));\n        arrayAverage.push(valOMS);\n      }\n\n      if (flagSettings !== null && flagSettings !== void 0 && flagSettings.average) {\n        let valAverage = average(arrayAverage);\n        formik.setFieldValue(\"average\", valAverage.toFixed(2));\n        setAverageEnergy(valAverage);\n      }\n    }\n  };\n\n  const PhisicalActivity = () => {\n    let value = parseInt(formik.values[\"activity\"]);\n\n    if (value) {\n      let result = 0;\n      if (value == 1) result = averageEnergy * 1.3;\n      if (value == 2) result = averageEnergy * 1.4;\n      if (value == 3) result = averageEnergy * 1.5;\n      formik.setFieldValue(\"activity_cal\", result.toFixed(2));\n    }\n  };\n\n  const SaveMenu = async () => {\n    if (dataMenu != null) {\n      let resultMenu = await request(apiMenu.post_new_menu_patient, dataMenu, null, {\n        locale\n      });\n\n      if (dataMenu != null) {\n        return resultMenu.id;\n      }\n\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    if (dataPatient) GetMenuPatient();\n  }, [dataPatient, dataConsulation]);\n\n  const GetMenuPatient = async () => {\n    if (dataPatient !== null && dataPatient !== void 0 && dataPatient.menu) {\n      if (idConsulation == null) {\n        let resultMenuPatient = await request(apiMenu.get_menu_patient, null, [dataPatient === null || dataPatient === void 0 ? void 0 : dataPatient.menu], {\n          locale\n        });\n\n        if (resultMenuPatient != null) {\n          let resultMenu = await request(apiMenu.get_menu, null, [resultMenuPatient.menu], {\n            locale\n          });\n          let schedules = map(resultMenuPatient === null || resultMenuPatient === void 0 ? void 0 : resultMenuPatient.schedules, element => {\n            var _element$type, _element$type2;\n\n            return {\n              type: element === null || element === void 0 ? void 0 : (_element$type = element.type) === null || _element$type === void 0 ? void 0 : _element$type.id,\n              name: element === null || element === void 0 ? void 0 : (_element$type2 = element.type) === null || _element$type2 === void 0 ? void 0 : _element$type2.name,\n              fromTime: element.fromTime,\n              toTime: element.toTime\n            };\n          });\n          let dataMenu = {\n            patient: query.id,\n            menu: resultMenu === null || resultMenu === void 0 ? void 0 : resultMenu.id,\n            name: resultMenu === null || resultMenu === void 0 ? void 0 : resultMenu.name,\n            schedules: schedules\n          };\n          setDataMenu(dataMenu);\n        }\n      }\n\n      if (idConsulation != null) {\n        if (dataConsulation !== null && dataConsulation !== void 0 && dataConsulation.patientMenu) {\n          let reqPatientMenu = await request(apiMenu.get_menu_patient, null, [dataConsulation.patientMenu], {\n            locale\n          });\n\n          if (reqPatientMenu != null) {\n            let resultMenu = await request(apiMenu.get_menu, null, [reqPatientMenu.menu], {\n              locale\n            });\n\n            if (resultMenu != null) {\n              let dataMenu = {\n                patient: query.id,\n                menu: resultMenu === null || resultMenu === void 0 ? void 0 : resultMenu.id,\n                name: resultMenu === null || resultMenu === void 0 ? void 0 : resultMenu.name\n              };\n              setDataMenu(dataMenu);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if ((dataMenu === null || dataMenu === void 0 ? void 0 : dataMenu.name) != null) {\n      let name = \"\";\n      if (dataMenu.name == \"\") name = Getlanguage(\"input\", \"unnamed\");\n      if (dataMenu.name != \"\") name = dataMenu.name;\n      setNameMenu(name);\n    }\n  }, [dataMenu, locale]);\n\n  const ClickShowMenu = () => {\n    setStateConsult(2);\n  };\n\n  const ClickShowConsult = () => {\n    setStateConsult(1);\n  };\n\n  const ClickSend = () => {\n    ScrollError();\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [stateConsult == 1 && /*#__PURE__*/_jsx(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"col-6\",\n              children: /*#__PURE__*/_jsx(InputDate_1, {\n                formik: formik,\n                title: \"date\",\n                name: \"date\",\n                value: formik.values.date,\n                error: formik.errors.date\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-6\",\n              children: /*#__PURE__*/_jsx(InputTimeForm_1, {\n                formik: formik,\n                title: \"hour\",\n                name: \"hour\",\n                value: formik.values.hour,\n                error: formik.errors.hour\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-12\",\n              children: /*#__PURE__*/_jsx(InputTextAreaForm_1, {\n                formik: formik,\n                title: \"note\",\n                name: \"notes\",\n                value: formik.values.notes,\n                error: formik.errors.notes\n              })\n            })\n          })\n        }), flagFollow && /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-12\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-title-secction-1\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"text\",\n              children: /*#__PURE__*/_jsx(TagLang, {\n                group: \"input\",\n                tag: \"questionnaire_consult\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"icon\",\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: icon_title\n              })\n            })]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsx(FormikProvider, {\n              value: formik,\n              children: /*#__PURE__*/_jsx(FieldArray, {\n                name: \"answers\",\n                render: arrayHelpers => /*#__PURE__*/_jsx(FormContQuestionnarie, {\n                  formik: formik,\n                  arrayHelpers: arrayHelpers,\n                  father: \"answers\"\n                })\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-title-secction-1\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"text\",\n              children: /*#__PURE__*/_jsx(TagLang, {\n                group: \"input\",\n                tag: \"anthropometry\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"icon\",\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: icon_title\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsx(FormikProvider, {\n              value: formik,\n              children: /*#__PURE__*/_jsx(FieldArray, {\n                name: \"anthropometrys\",\n                render: arrayHelpers => /*#__PURE__*/_jsx(FormContAntrophometric, {\n                  formik: formik,\n                  arrayHelpers: arrayHelpers,\n                  father: \"anthropometrys\"\n                })\n              })\n            })\n          })\n        }), /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-title-secction-1\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"text\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"input\",\n                  tag: \"folds\"\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"icon\",\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: icon_title\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsx(FormikProvider, {\n                value: formik,\n                children: /*#__PURE__*/_jsx(FieldArray, {\n                  name: \"folds\",\n                  render: arrayHelpers => /*#__PURE__*/_jsx(FormContFolds, {\n                    formik: formik,\n                    arrayHelpers: arrayHelpers,\n                    father: \"folds\"\n                  })\n                })\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-title-secction-1\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"text\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"input\",\n                  tag: \"circumference\"\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"icon\",\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: icon_title\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsx(FormikProvider, {\n                value: formik,\n                children: /*#__PURE__*/_jsx(FieldArray, {\n                  name: \"circumferences\",\n                  render: arrayHelpers => /*#__PURE__*/_jsx(FormContFoldsCircunferences, {\n                    formik: formik,\n                    arrayHelpers: arrayHelpers,\n                    father: \"circumferences\"\n                  })\n                })\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-title-secction-1\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"text\",\n              children: /*#__PURE__*/_jsx(TagLang, {\n                group: \"input\",\n                tag: \"energy_cal\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"icon\",\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: icon_title\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"col-3\",\n              children: /*#__PURE__*/_jsx(InputTextForm_1, {\n                formik: formik,\n                title: \"harris\",\n                name: \"harris\",\n                value: formik.values.harris,\n                error: formik.errors.harris,\n                disabled: true\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-3\",\n              children: /*#__PURE__*/_jsx(InputTextForm_1, {\n                formik: formik,\n                title: \"mifflin\",\n                name: \"mifflin\",\n                value: formik.values.mifflin,\n                error: formik.errors.mifflin,\n                disabled: true\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-3\",\n              children: /*#__PURE__*/_jsx(InputTextForm_1, {\n                formik: formik,\n                title: \"owen\",\n                name: \"owen\",\n                value: formik.values.owen,\n                error: formik.errors.owen,\n                disabled: true\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-3\",\n              children: /*#__PURE__*/_jsx(InputTextForm_1, {\n                formik: formik,\n                title: \"fao\",\n                name: \"fao\",\n                value: formik.values.fao,\n                error: formik.errors.fao,\n                disabled: true\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-3\",\n              children: /*#__PURE__*/_jsx(InputTextForm_1, {\n                formik: formik,\n                title: \"average\",\n                name: \"average\",\n                value: formik.values.average,\n                error: formik.errors.average,\n                disabled: true\n              })\n            })\n          })\n        }), /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-title-secction-1\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"text\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"input\",\n                  tag: \"physical_act\"\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"icon\",\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: icon_title\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"col-12\",\n            children: [/*#__PURE__*/_jsx(FieldRadio, {\n              formik: formik,\n              name: \"activity\",\n              values: valuesActivity\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.activity\n            })]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsx(\"div\", {\n                className: \"col-6\",\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"sty-cont-input-2\",\n                  children: [/*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-tag\",\n                    children: /*#__PURE__*/_jsx(TagLang, {\n                      group: \"input\",\n                      tag: \"day_kcal\"\n                    })\n                  }), /*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-input\",\n                    children: /*#__PURE__*/_jsx(\"input\", {\n                      name: `activity_cal`,\n                      value: formik.values.activity_cal,\n                      onChange: formik.handleChange,\n                      type: \"text\",\n                      disabled: true\n                    })\n                  })]\n                })\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-title-secction-1\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"text\",\n              children: /*#__PURE__*/_jsx(TagLang, {\n                group: \"input\",\n                tag: \"menu\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"icon\",\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: icon_title\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"col-8\",\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                className: \"sty-cont-input-2\",\n                children: [/*#__PURE__*/_jsx(\"div\", {\n                  className: \"sty-tag\",\n                  children: /*#__PURE__*/_jsx(TagLang, {\n                    group: \"input\",\n                    tag: \"Assigned_menu\"\n                  })\n                }), /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"sty-value\",\n                  children: [nameMenu == null && /*#__PURE__*/_jsx(TagLang, {\n                    group: \"validation\",\n                    tag: \"without_assigned_menu\"\n                  }), nameMenu != null && /*#__PURE__*/_jsxs(_Fragment, {\n                    children: [\" \", nameMenu]\n                  })]\n                })]\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-4 text-right\",\n              children: idConsulation == null && /*#__PURE__*/_jsx(\"button\", {\n                className: \"sty-button-dash-1\",\n                onClick: () => ClickShowMenu(),\n                children: /*#__PURE__*/_jsx(\"div\", {\n                  className: \"sty-tag\",\n                  children: /*#__PURE__*/_jsx(TagLang, {\n                    group: \"input\",\n                    tag: \"select\"\n                  })\n                })\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12 text-center sty-magin-b-1\",\n          children: /*#__PURE__*/_jsxs(\"button\", {\n            className: \"sty-button-dash-1\",\n            type: \"submit\",\n            onClick: () => ClickSend(),\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"sty-icon\",\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: \"/static/img/favicons/app/save_w.svg\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"sty-tag\",\n              children: /*#__PURE__*/_jsx(TagLang, {\n                group: \"button\",\n                tag: \"save\"\n              })\n            })]\n          })\n        })]\n      })\n    }), stateConsult == 2 && /*#__PURE__*/_jsx(SectionMenu, {\n      dataMenu: dataMenu,\n      setDataMenu: setDataMenu,\n      ClickShowConsult: ClickShowConsult,\n      dataMenuPatient: dataMenuPatient\n    })]\n  });\n}\n\nfunction initialValues() {\n  return {\n    date: \"\",\n    hour: \"\",\n    answers: [],\n    anthropometrys: [],\n    folds: [],\n    circumferences: [],\n    harris: \"\",\n    mifflin: \"\",\n    owen: \"\",\n    fao: \"\",\n    average: \"\",\n    activity: \"1\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    date: Yup.string().required(\"required\"),\n    hour: Yup.string().required(\"required\")\n  };\n}","map":null,"metadata":{},"sourceType":"module"}