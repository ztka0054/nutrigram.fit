{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from \"react\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport * as Yup from \"yup\";\nimport { size, map } from \"lodash\";\nimport useApp from \"../../../../../../hooks/useApp\";\nimport TagLang from \"../../../../../modules/GetTagLang\";\nimport request from \"../../../../../../helper/core_services/core/requestService\";\nimport consulation from \"../../../../../../helper/core_services/endpoints/consulation\";\nimport { message_1 } from \"../../../../../../helper/appearance/messages\";\nimport GetLanguage from \"../../../../../../helper/i18n/getValueTagLang\";\nimport SubFormQuestions from \"./FormSubQuestions.js\";\nexport default function FormQuestionsClinics() {\n  const {\n    locale\n  } = useApp();\n  const {\n    0: flagSave,\n    1: setFlagSave\n  } = useState(false);\n  const formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData, {\n      resetForm\n    }) => {\n      SendForm(formData);\n    }\n  });\n  useEffect(() => {\n    GetQuestions();\n  }, []);\n  useEffect(() => {\n    if (flagSave) {\n      GetQuestions();\n      setFlagSave(false);\n    }\n  }, [flagSave]);\n\n  const GetQuestions = async () => {\n    let req = await request(consulation.get_questions_settings, null, null, {\n      locale\n    });\n\n    if (req != null) {\n      let nutriQuestions = [];\n      map(req, element => {\n        if (element.nutritionist == null) {\n          let values = element;\n          if (values.setting == null) values.isHidden = true;else values.isHidden = !element.setting.isHidden;\n          nutriQuestions.push(values);\n        }\n      });\n      PutDataQuestions(nutriQuestions);\n    }\n  };\n\n  const PutDataQuestions = info => {\n    formik.setValues({\n      questions: info\n    });\n  };\n\n  const SendForm = async formData => {\n    let requestQuestions = [];\n    map(formData.questions, element => {\n      let params = {\n        isHidden: !element.isHidden\n      };\n      requestQuestions.push(request(consulation.put_questions_settings, params, [element.id], {\n        locale\n      }));\n    });\n    await Promise.all(requestQuestions);\n    setFlagSave(true);\n    message_1(GetLanguage(\"validation\", \"message_1\"));\n  };\n\n  return /*#__PURE__*/_jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: /*#__PURE__*/_jsx(FormikProvider, {\n      value: formik,\n      children: /*#__PURE__*/_jsx(FieldArray, {\n        name: \"questions\",\n        render: arrayHelpers => /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-12\",\n              children: /*#__PURE__*/_jsx(SubFormQuestions, {\n                formik: formik,\n                arrayHelpers: arrayHelpers,\n                father: \"questions\"\n              })\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12 text-center sty-magin-b-1\",\n            children: /*#__PURE__*/_jsxs(\"button\", {\n              className: \"sty-button-dash-1\",\n              type: \"submit\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-icon\",\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: \"/static/img/favicons/app/save_w.svg\"\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-tag\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"button\",\n                  tag: \"save\"\n                })\n              })]\n            })\n          })]\n        })\n      })\n    })\n  });\n}\n\nfunction initialValues() {\n  return {\n    questions: []\n  };\n}\n\nfunction validationSchema() {\n  return {};\n}","map":null,"metadata":{},"sourceType":"module"}