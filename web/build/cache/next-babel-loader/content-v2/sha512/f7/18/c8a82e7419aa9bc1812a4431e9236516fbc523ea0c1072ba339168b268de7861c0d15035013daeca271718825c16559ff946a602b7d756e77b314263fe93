{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from \"react\";\nimport i18n from \"../../helper/i18n/config\";\nimport { map } from \"lodash\";\nimport useApp from \"../../hooks/useApp\";\nexport default function GetTagLang(_ref) {\n  var _ref$group = _ref.group,\n      group = _ref$group === void 0 ? \"\" : _ref$group,\n      tag = _ref.tag,\n      _ref$dynamic = _ref.dynamic,\n      dynamic = _ref$dynamic === void 0 ? [] : _ref$dynamic;\n\n  var _useApp = useApp(),\n      locale = _useApp.locale;\n\n  var _useState = useState(null),\n      tagValue = _useState[0],\n      setTagValue = _useState[1];\n\n  useEffect(function () {\n    if (locale) PutTag();\n  }, [locale, dynamic]);\n\n  var PutTag = function PutTag() {\n    var tagValue = i18n.t(\"\".concat(group, \":\").concat(tag));\n    map(dynamic, function (element) {\n      tagValue = tagValue.replaceAt(tagValue.indexOf(\"#\"), element);\n    });\n    setTagValue(tagValue);\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: tagValue\n  });\n}\n\nString.prototype.replaceAt = function (index, replacement) {\n  if (index >= this.length) {\n    return this.valueOf();\n  }\n\n  return this.substring(0, index) + replacement + this.substring(index + 1);\n};","map":null,"metadata":{},"sourceType":"module"}