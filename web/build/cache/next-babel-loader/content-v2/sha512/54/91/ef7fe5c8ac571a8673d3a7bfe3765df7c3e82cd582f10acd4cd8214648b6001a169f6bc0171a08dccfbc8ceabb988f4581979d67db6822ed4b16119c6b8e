{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport * as Yup from \"yup\";\nimport useApp from \"../../../../../../hooks/useApp\";\nimport TagLang from \"../../../../../modules/GetTagLang\";\nimport MessageValidation from \"../../../../../modules/Forms/MessageValidation\";\nimport request from \"../../../../../../helper/core_services/core/requestService\";\nimport workouts from \"../../../../../../helper/core_services/endpoints/workouts\";\nimport GetLanguage from \"../../../../../../helper/i18n/getValueTagLang\";\nimport { loadElement } from \"../../../../../../helper/appearance/load\";\nimport FieldSelect from \"../../../../../../helper/forms/elements/select\";\nexport default function FormActivity({\n  idPatient,\n  setFormPhysical,\n  setFlagSendPhysical\n}) {\n  const {\n    locale\n  } = useApp();\n  const {\n    0: catType,\n    1: setCatType\n  } = useState([]);\n  const {\n    0: catClasification,\n    1: setcatClasification\n  } = useState([]);\n  const {\n    0: catSchedule,\n    1: setCatSchedule\n  } = useState([{\n    id: 1,\n    name: \"AM\"\n  }, {\n    id: 2,\n    name: \"PM\"\n  }]);\n  const formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData, {\n      resetForm\n    }) => {\n      if (!(formData !== null && formData !== void 0 && formData.id)) SendForm(formData, resetForm);\n      if (formData !== null && formData !== void 0 && formData.id) UpdateForm(formData);\n    }\n  });\n  useEffect(() => {\n    setFormPhysical(formik);\n  }, []);\n  useEffect(() => {\n    if (idPatient != null) getInformation();\n  }, [idPatient]);\n  useEffect(() => {\n    setCatType([{\n      id: 1,\n      name: GetLanguage(\"input\", \"strength\")\n    }, {\n      id: 2,\n      name: GetLanguage(\"input\", \"cardio\")\n    }]);\n  }, [locale]);\n  useEffect(() => {\n    setcatClasification([{\n      id: 1,\n      name: GetLanguage(\"input\", \"sedentary\")\n    }, {\n      id: 2,\n      name: GetLanguage(\"input\", \"light\")\n    }, {\n      id: 3,\n      name: GetLanguage(\"input\", \"moderate\")\n    }, {\n      id: 4,\n      name: GetLanguage(\"input\", \"intense\")\n    }]);\n  }, [locale]);\n\n  const getInformation = async () => {\n    let req = await request(workouts.get_configuration, null, [idPatient], locale);\n\n    if (req != null) {\n      formik.setValues(req);\n    }\n  };\n\n  const SendForm = async formData => {\n    await SaveWorkOut(formData);\n    setFlagSendPhysical(true);\n  };\n\n  const UpdateForm = async formData => {\n    await UpdateWorkOut(formData);\n    setFlagSendPhysical(true);\n  };\n\n  const SaveWorkOut = async formData => {\n    loadElement(true);\n    await request(workouts.post_create_configuration, formData, [formData.idUser], {\n      locale\n    });\n    loadElement(false);\n  };\n\n  const UpdateWorkOut = async formData => {\n    loadElement(true);\n    await request(workouts.patch_update_configuration, formData, [formData.idUser], {\n      locale\n    });\n    loadElement(false);\n  };\n\n  return /*#__PURE__*/_jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"col-12\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-6\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-cont-input-2\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-tag\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"input\",\n                  tag: \"day_physical\"\n                })\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"sty-input\",\n                children: [/*#__PURE__*/_jsx(\"input\", {\n                  name: `days`,\n                  value: formik.values.days,\n                  onChange: formik.handleChange,\n                  type: \"number\",\n                  max: \"7\"\n                }), /*#__PURE__*/_jsx(MessageValidation, {\n                  error: formik.errors.days\n                })]\n              })]\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-6\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-cont-input-2\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-tag\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"input\",\n                  tag: \"minutes_physical\"\n                })\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"sty-input\",\n                children: [/*#__PURE__*/_jsx(\"input\", {\n                  name: `minutes`,\n                  value: formik.values.minutes,\n                  onChange: formik.handleChange,\n                  type: \"number\"\n                }), /*#__PURE__*/_jsx(MessageValidation, {\n                  error: formik.errors.minutes\n                })]\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-6\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-cont-input-2\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-tag\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"input\",\n                  tag: \"training_type\"\n                })\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"sty-input\",\n                children: [/*#__PURE__*/_jsx(FieldSelect, {\n                  formik: formik,\n                  name: \"type\",\n                  elements: catType\n                }), /*#__PURE__*/_jsx(MessageValidation, {\n                  error: formik.errors.type\n                })]\n              })]\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-6\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-cont-input-2\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-tag\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"input\",\n                  tag: \"schedule_physical\"\n                })\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"sty-input\",\n                children: [/*#__PURE__*/_jsx(FieldSelect, {\n                  formik: formik,\n                  name: \"schedule\",\n                  elements: catSchedule\n                }), /*#__PURE__*/_jsx(MessageValidation, {\n                  error: formik.errors.schedule\n                })]\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-6\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-cont-input-2\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-tag\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"input\",\n                  tag: \"clasification_pyshical\"\n                })\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"sty-input\",\n                children: [/*#__PURE__*/_jsx(FieldSelect, {\n                  formik: formik,\n                  name: \"classification\",\n                  elements: catClasification\n                }), /*#__PURE__*/_jsx(MessageValidation, {\n                  error: formik.errors.classification\n                })]\n              })]\n            })\n          })\n        })]\n      })\n    })\n  });\n}\n\nfunction initialValues() {\n  return {\n    days: 0,\n    type: \"\",\n    minutes: 0,\n    schedule: \"\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    days: Yup.string().required(\"required\"),\n    type: Yup.string().required(\"required\"),\n    minutes: Yup.string().required(\"required\"),\n    schedule: Yup.string().required(\"required\")\n  };\n}","map":null,"metadata":{},"sourceType":"module"}