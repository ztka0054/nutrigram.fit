{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { isEmpty } from \"lodash\";\nimport moment from \"moment\";\nimport Information from \"./Information\";\nimport Sections from \"./Sections\";\nimport request from \"../../../../../helper/core_services/core/requestService\";\nimport patient from \"../../../../../helper/core_services/endpoints/patients\";\nexport default function Detail() {\n  var _useRouter;\n\n  const query = (_useRouter = useRouter()) === null || _useRouter === void 0 ? void 0 : _useRouter.query;\n  const {\n    locale\n  } = useRouter();\n  const {\n    0: dataPatient,\n    1: setDataPatient\n  } = useState(null);\n  const {\n    0: refreshPatient,\n    1: setRefreshPatient\n  } = useState(false);\n  useEffect(() => {\n    if (query) if (!isEmpty(query)) GetDataPatient();\n  }, [query, locale]);\n  useEffect(() => {\n    if (refreshPatient) {\n      GetDataPatient();\n      setRefreshPatient(false);\n    }\n  }, [refreshPatient]);\n\n  const GetDataPatient = async () => {\n    let req = await request(patient.get_patient, null, [query.id], {\n      locale\n    });\n    if (req != null) setDataPatient(_objectSpread(_objectSpread({}, req), {}, {\n      age: moment().diff(moment(req.birthday), \"years\")\n    }));\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Information, {\n      dataPatient: dataPatient\n    }), /*#__PURE__*/_jsx(Sections, {\n      dataPatient: dataPatient,\n      setRefreshPatient: setRefreshPatient\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}