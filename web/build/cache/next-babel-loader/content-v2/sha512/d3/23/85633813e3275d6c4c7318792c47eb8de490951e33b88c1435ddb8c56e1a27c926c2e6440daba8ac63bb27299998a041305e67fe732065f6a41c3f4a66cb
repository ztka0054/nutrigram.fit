{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport { addDays } from \"date-fns\";\nimport moment from \"moment\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport TagLang from \"../../../../../../modules/GetTagLang\";\nimport getValueTagLang from \"../../../../../../../helper/i18n/getValueTagLang\";\nimport request from \"../../../../../../../helper/core_services/core/requestService\";\nimport ApiAppoinments from \"../../../../../../../helper/core_services/endpoints/appointments\";\nimport UTCFormat from \"../../../../../../../helper/date/utcFormat\";\nimport style from \"./formNew.module.scss\";\nlet startDate = addDays(new Date(), 0);\nlet endDate = addDays(new Date(), 7);\nexport default function IndexForm({\n  setStateModal,\n  setRefresh,\n  unavalivilityObject\n}) {\n  const router = useRouter();\n  const {\n    0: dateFrom,\n    1: setDateFrom\n  } = useState(null);\n  const {\n    0: dateTo,\n    1: setDateTo\n  } = useState(null);\n  useEffect(() => {\n    if (unavalivilityObject) {\n      formik.setFieldValue(\"id\", unavalivilityObject === null || unavalivilityObject === void 0 ? void 0 : unavalivilityObject.id);\n      setDateFrom(moment(unavalivilityObject === null || unavalivilityObject === void 0 ? void 0 : unavalivilityObject.fromDate).toDate());\n      setDateTo(moment(unavalivilityObject === null || unavalivilityObject === void 0 ? void 0 : unavalivilityObject.toDate).toDate());\n    }\n  }, [unavalivilityObject]);\n  const formik = useFormik({\n    validateOnChange: false,\n    validateOnBlur: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData, {\n      resetForm\n    }) => {\n      if (formData !== null && formData !== void 0 && formData.id) UpdateElement(formData);else CreateElement(formData);\n    }\n  });\n  useEffect(() => {\n    formik.setFieldValue(\"fromDate\", UTCFormat(dateFrom));\n  }, [dateFrom]);\n  useEffect(() => {\n    formik.setFieldValue(\"toDate\", UTCFormat(dateTo));\n  }, [dateTo]);\n\n  const UpdateElement = async formData => {\n    let result = await request(ApiAppoinments.patch_unavailabilities, formData, [formData === null || formData === void 0 ? void 0 : formData.id], {\n      locale: router.locale\n    });\n\n    if (result) {\n      setStateModal(false);\n      setRefresh(true);\n    }\n  };\n\n  const CreateElement = async formData => {\n    let result = await request(ApiAppoinments.post_unavailabilities, formData, null, {\n      locale: router.locale\n    });\n\n    if (result) {\n      setStateModal(false);\n      setRefresh(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: style.contInputs,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: style.contInput,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.tag,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"from_quotes\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(DatePicker, {\n            placeholderText: getValueTagLang(\"input\", \"start_date\"),\n            className: `${style.datePicker}`,\n            selected: dateFrom,\n            onChange: date => setDateFrom(date),\n            minDate: new Date(),\n            maxDate: dateTo\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: style.contInput,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.tag,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"to_quotes\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(DatePicker, {\n            placeholderText: getValueTagLang(\"input\", \"final_date\"),\n            className: `${style.datePicker}`,\n            selected: dateTo,\n            onChange: date => setDateTo(date),\n            minDate: dateFrom,\n            disabled: dateFrom == null\n          })\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: style.contButtons,\n      children: [/*#__PURE__*/_jsx(\"button\", {\n        className: style.buttonCancel,\n        onClick: () => setStateModal(false),\n        type: \"button\",\n        children: /*#__PURE__*/_jsx(TagLang, {\n          group: \"button\",\n          tag: \"cancel\"\n        })\n      }), /*#__PURE__*/_jsx(\"button\", {\n        className: style.buttonAccept,\n        type: \"submit\",\n        children: /*#__PURE__*/_jsx(TagLang, {\n          group: \"button\",\n          tag: \"accept\"\n        })\n      })]\n    })]\n  });\n}\n\nfunction initialValues() {\n  return {\n    fromDate: \"\",\n    toDate: \"\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    fromDate: Yup.string().required(\"required\"),\n    toDate: Yup.string().required(\"required\")\n  };\n}","map":null,"metadata":{},"sourceType":"module"}