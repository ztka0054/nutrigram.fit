{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport React, { useState, useEffect } from \"react\";\nimport i18n from \"../../helper/i18n/config\";\nimport { map } from \"lodash\";\nimport useApp from \"../../hooks/useApp\";\nexport default function GetTagLang({\n  group = \"\",\n  tag,\n  dynamic = []\n}) {\n  let {\n    locale\n  } = useApp();\n  const {\n    0: tagValue,\n    1: setTagValue\n  } = useState(null);\n  useEffect(() => {\n    if (locale) PutTag();\n  }, [locale, dynamic]);\n\n  const PutTag = () => {\n    let tagValue = i18n.t(`${group}:${tag}`);\n    map(dynamic, element => {\n      tagValue = tagValue.replaceAt(tagValue.indexOf(\"#\"), element);\n    });\n    setTagValue(tagValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: tagValue\n  }, void 0, false);\n}\n\nString.prototype.replaceAt = function (index, replacement) {\n  if (index >= this.length) {\n    return this.valueOf();\n  }\n\n  return this.substring(0, index) + replacement + this.substring(index + 1);\n};","map":{"version":3,"sources":["C:/Users/alex9/Nutrigram_Web/web/components/modules/GetTagLang.js"],"names":["React","useState","useEffect","i18n","map","useApp","GetTagLang","group","tag","dynamic","locale","tagValue","setTagValue","PutTag","t","element","replaceAt","indexOf","String","prototype","index","replacement","length","valueOf","substring"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,eAAe,SAASC,UAAT,CAAoB;AAAEC,EAAAA,KAAK,GAAG,EAAV;AAAcC,EAAAA,GAAd;AAAmBC,EAAAA,OAAO,GAAG;AAA7B,CAApB,EAAuD;AAClE,MAAI;AAAEC,IAAAA;AAAF,MAAaL,MAAM,EAAvB;AAEA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAC,IAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,MAAJ,EAAYG,MAAM;AACrB,GAFQ,EAEN,CAACH,MAAD,EAASD,OAAT,CAFM,CAAT;;AAIA,QAAMI,MAAM,GAAG,MAAM;AACjB,QAAIF,QAAQ,GAAGR,IAAI,CAACW,CAAL,CAAQ,GAAEP,KAAM,IAAGC,GAAI,EAAvB,CAAf;AACAJ,IAAAA,GAAG,CAACK,OAAD,EAAWM,OAAD,IAAa;AACtBJ,MAAAA,QAAQ,GAAGA,QAAQ,CAACK,SAAT,CAAmBL,QAAQ,CAACM,OAAT,CAAiB,GAAjB,CAAnB,EAA0CF,OAA1C,CAAX;AACH,KAFE,CAAH;AAGAH,IAAAA,WAAW,CAACD,QAAD,CAAX;AACH,GAND;;AAQA,sBAAO;AAAA,cAAGA;AAAH,mBAAP;AACH;;AAEDO,MAAM,CAACC,SAAP,CAAiBH,SAAjB,GAA6B,UAAUI,KAAV,EAAiBC,WAAjB,EAA8B;AACvD,MAAID,KAAK,IAAI,KAAKE,MAAlB,EAA0B;AACtB,WAAO,KAAKC,OAAL,EAAP;AACH;;AAED,SAAO,KAAKC,SAAL,CAAe,CAAf,EAAkBJ,KAAlB,IAA2BC,WAA3B,GAAyC,KAAKG,SAAL,CAAeJ,KAAK,GAAG,CAAvB,CAAhD;AACH,CAND","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport i18n from \"../../helper/i18n/config\";\r\nimport { map } from \"lodash\";\r\nimport useApp from \"../../hooks/useApp\";\r\n\r\nexport default function GetTagLang({ group = \"\", tag, dynamic = [] }) {\r\n    let { locale } = useApp();\r\n\r\n    const [tagValue, setTagValue] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (locale) PutTag();\r\n    }, [locale, dynamic]);\r\n\r\n    const PutTag = () => {\r\n        let tagValue = i18n.t(`${group}:${tag}`);\r\n        map(dynamic, (element) => {\r\n            tagValue = tagValue.replaceAt(tagValue.indexOf(\"#\"), element);\r\n        });\r\n        setTagValue(tagValue);\r\n    };\r\n\r\n    return <>{tagValue}</>;\r\n}\r\n\r\nString.prototype.replaceAt = function (index, replacement) {\r\n    if (index >= this.length) {\r\n        return this.valueOf();\r\n    }\r\n\r\n    return this.substring(0, index) + replacement + this.substring(index + 1);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}