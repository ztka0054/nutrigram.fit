{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport { Collapse, CardBody, Card } from \"reactstrap\";\nimport * as Yup from \"yup\";\nimport { map, size } from \"lodash\";\nimport moment from \"moment\";\nimport useApp from \"../../../../../../../../hooks/useApp\";\nimport TagLang from \"../../../../../../../modules/GetTagLang\";\nimport MessageValidation from \"../../../../../../../modules/Forms/MessageValidation\";\nimport request from \"../../../../../../../../helper/core_services/core/requestService\";\nimport patient from \"../../../../../../../../helper/core_services/endpoints/patients\";\nimport menu from \"../../../../../../../../helper/core_services/endpoints/menu\";\nimport { message_1 } from \"../../../../../../../../helper/appearance/messages\";\nimport GetLanguage from \"../../../../../../../../helper/i18n/getValueTagLang\";\nimport FormContMenu from \"./FormContMenu\";\nimport Table from \"./Table\";\nlet emptyField = {\n  monday: null,\n  tuesday: null,\n  wednesday: null,\n  thursday: null,\n  friday: null,\n  saturday: null,\n  sunday: null\n};\nexport default function FormMenu({\n  ShowData\n}) {\n  const {\n    query\n  } = useRouter();\n  const {\n    locale,\n    putFlagChangeElement\n  } = useApp();\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const {\n    0: selectMeals,\n    1: setSelectMeals\n  } = useState([]);\n  const formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData, {\n      resetForm\n    }) => {\n      if (!(formData !== null && formData !== void 0 && formData.idSchecule)) SendNewForm(formData, resetForm);\n      if (formData !== null && formData !== void 0 && formData.idSchecule) SendUpdateForm(formData);\n    }\n  });\n  useEffect(() => {\n    GetMeals();\n  }, [locale]);\n  useEffect(() => {\n    if (size(selectMeals) > 0) GetDataPatient();\n  }, [selectMeals]);\n\n  const GetDataPatient = async () => {\n    let req = await request(patient.get_patient, null, [query.id], {\n      locale\n    });\n\n    if (req != null) {\n      if (req.menu != null) GetUpdateData(req.menu);\n    }\n  };\n\n  const toogle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const GetMeals = async () => {\n    let req = await request(menu.get_meals_type, null, null, {\n      locale\n    });\n    if (req != null) DrawMeals(req);\n  };\n\n  const GetUpdateData = async idMenu => {\n    let req = await request(menu.get_menu_patient, null, [idMenu], {\n      locale\n    });\n\n    if (req != null) {\n      let req1 = await request(menu.get_menu, null, [req.menu], {\n        locale\n      });\n      let schedulesF = map(selectMeals, element => {\n        let find = req.schedules.find(obj => {\n          return obj.type.id == element.type;\n        });\n        if (find == undefined) return element;else return _objectSpread({\n          fromTime: moment(`2020-01-01T${find.fromTime}`).toDate(),\n          toTime: moment(`2020-01-01T${find.toTime}`).toDate()\n        }, element);\n      });\n      let schedules = map(schedulesF, (element, index) => {\n        let find = req1.mealTypeMenus.find(obj => {\n          return obj.mealType.id == element.type;\n        });\n        formik.setFieldValue(`schedules[${index}].fromTime`, element.fromTime);\n        formik.setFieldValue(`schedules[${index}].toTime`, element.toTime);\n\n        if (find != undefined) {\n          formik.setFieldValue(`schedules[${index}].monday`, find.monday);\n          formik.setFieldValue(`schedules[${index}].tuesday`, find.tuesday);\n          formik.setFieldValue(`schedules[${index}].wednesday`, find.wednesday);\n          formik.setFieldValue(`schedules[${index}].thursday`, find.thursday);\n          formik.setFieldValue(`schedules[${index}].friday`, find.friday);\n          formik.setFieldValue(`schedules[${index}].saturday`, find.saturday);\n          formik.setFieldValue(`schedules[${index}].sunday`, find.sunday);\n        }\n      });\n      formik.setFieldValue(\"idSchecule\", req.id);\n      formik.setFieldValue(\"menu\", req1.id);\n      formik.setFieldValue(\"name\", req1.name);\n      formik.setFieldValue(\"patient\", query.id);\n    }\n  };\n\n  const DrawMeals = info => {\n    let schedules = map(info, element => {\n      return _objectSpread({\n        type: element.id,\n        name: element.name\n      }, emptyField); // arrayHelpers.push({ mealType: element.id, ...element, ...week });\n    });\n    setSelectMeals(schedules);\n    let values = {\n      name: \"\",\n      schedules\n    };\n    formik.setValues(values);\n  };\n\n  const SelectMenu = async (row, selectMeals) => {\n    let req = await request(menu.get_menu, null, [row.id], {\n      locale\n    });\n\n    if (req != null) {\n      setIsOpen(false);\n      let schedules = map(selectMeals, (element, index) => {\n        let find = req.mealTypeMenus.find(obj => {\n          return obj.mealType.id === element.type;\n        });\n\n        if (find != undefined) {\n          formik.setFieldValue(`schedules[${index}].type`, element.type); // formik.setFieldValue(\n          //     `schedules[${index}].name`,\n          //     find.name[localeFix]\n          // );\n\n          formik.setFieldValue(`schedules[${index}].monday`, find.monday);\n          formik.setFieldValue(`schedules[${index}].tuesday`, find.tuesday);\n          formik.setFieldValue(`schedules[${index}].wednesday`, find.wednesday);\n          formik.setFieldValue(`schedules[${index}].thursday`, find.thursday);\n          formik.setFieldValue(`schedules[${index}].friday`, find.friday);\n          formik.setFieldValue(`schedules[${index}].saturday`, find.saturday);\n          formik.setFieldValue(`schedules[${index}].sunday`, find.sunday);\n        }\n      });\n      formik.setFieldValue(\"name\", row.name);\n      formik.setFieldValue(\"menu\", row.id);\n      formik.setFieldValue(\"patient\", query.id); // formik.setFieldValue(\"schedules\", schedules);\n    }\n  };\n\n  const SendNewForm = async formData => {\n    let dataSend = _objectSpread({}, formData);\n\n    dataSend.schedules = map(dataSend.schedules, element => {\n      let params = _objectSpread({}, element);\n\n      params.fromTime = moment(params.fromTime).format(\"HH:mm:ss\");\n      params.toTime = moment(params.toTime).format(\"HH:mm:ss\");\n      return params;\n    });\n    let req = await request(menu.post_new_menu_patient, dataSend, null, {\n      locale\n    });\n    ShowData();\n    message_1(GetLanguage(\"validation\", \"message_1\"));\n    putFlagChangeElement();\n  };\n\n  const SendUpdateForm = async formData => {\n    let dataSend = _objectSpread({}, formData);\n\n    dataSend.schedules = map(dataSend.schedules, element => {\n      let params = _objectSpread({}, element);\n\n      params.fromTime = moment(params.fromTime).format(\"HH:mm:ss\");\n      params.toTime = moment(params.toTime).format(\"HH:mm:ss\");\n      return params;\n    });\n    let req = await request(menu.patch_menu_patient, dataSend, [dataSend.idSchecule], {\n      locale\n    });\n    ShowData();\n    message_1(GetLanguage(\"validation\", \"message_1\"));\n    putFlagChangeElement();\n  };\n\n  return /*#__PURE__*/_jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-8\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-4 text-right\",\n            children: /*#__PURE__*/_jsxs(\"button\", {\n              className: \"sty-button-dash-1 fix-1 color-3\",\n              type: \"button\",\n              onClick: () => toogle(),\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-icon\",\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: \"/static/img/favicons/app/add_w.svg\"\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"sty-tag\",\n                children: \"Seleccionar Men\\xFA\"\n              })]\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12 margin-top-2\",\n        children: /*#__PURE__*/_jsx(Collapse, {\n          isOpen: isOpen,\n          className: \"sty-data-content\",\n          children: /*#__PURE__*/_jsx(Card, {\n            children: /*#__PURE__*/_jsx(CardBody, {\n              children: /*#__PURE__*/_jsx(Table, {\n                values: {\n                  selectMeals\n                },\n                SelectMenu: SelectMenu\n              })\n            })\n          })\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"name\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"input\", {\n              name: `name`,\n              value: formik.values.name,\n              onChange: formik.handleChange,\n              type: \"text\",\n              disabled: true\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.name\n            })]\n          })]\n        })\n      }), /*#__PURE__*/_jsx(FormikProvider, {\n        value: formik,\n        children: /*#__PURE__*/_jsx(FieldArray, {\n          name: \"schedules\",\n          render: arrayHelpers => /*#__PURE__*/_jsx(FormContMenu, {\n            formik: formik,\n            arrayHelpers: arrayHelpers,\n            father: \"schedules\"\n          })\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12 text-center sty-magin-b-1\",\n        children: /*#__PURE__*/_jsxs(\"button\", {\n          className: \"sty-button-dash-1\",\n          type: \"submit\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-icon\",\n            children: /*#__PURE__*/_jsx(\"img\", {\n              src: \"/static/img/favicons/app/save_w.svg\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"button\",\n              tag: \"save\"\n            })\n          })]\n        })\n      })]\n    })\n  });\n}\n\nfunction initialValues() {\n  return {\n    schedules: [{}]\n  };\n}\n\nfunction validationSchema() {\n  return {// image_check: Yup.string().required(\"required\"),\n  };\n}","map":null,"metadata":{},"sourceType":"module"}