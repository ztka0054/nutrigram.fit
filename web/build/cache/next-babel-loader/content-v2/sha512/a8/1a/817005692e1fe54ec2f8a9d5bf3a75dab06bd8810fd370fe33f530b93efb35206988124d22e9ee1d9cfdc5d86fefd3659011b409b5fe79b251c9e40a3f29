{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { map } from \"lodash\";\nimport useApp from \"../../../../../hooks/useApp\";\nimport request from \"../../../../../helper/core_services/core/requestService\";\nimport subscription from \"../../../../../helper/core_services/endpoints/subscription\";\nimport numberWithComas from \"../../../../../helper/text/textWithComas\";\nexport default function ListPlan() {\n  const router = useRouter();\n  const {\n    locale,\n    putObjectSignUp,\n    objectsSignUp\n  } = useApp();\n  const {\n    0: plans,\n    1: setPlans\n  } = useState([]);\n  useEffect(() => {\n    GetPlans();\n  }, [locale]);\n\n  const GetPlans = async () => {\n    let req = await request(subscription.get_subcriptions, null, null, {\n      locale\n    });\n    if (req != null) DrawPlans(req);\n  };\n\n  const DrawPlans = info => {\n    let colorCont = 0;\n    let elements = map(info, (element, index) => {\n      colorCont++;\n      if (colorCont == 5) colorCont = 1;\n      let description = element.description.split(\"\\r\\n\");\n      let prices = element.prices;\n      let elementsBlank = [];\n      let buttons = prices.map((button, indexB) => {\n        let price = button.price.amount;\n        elementsBlank.push( /*#__PURE__*/_jsx(\"div\", {\n          className: \"blank\"\n        }));\n        return /*#__PURE__*/_jsxs(\"button\", {\n          className: \"sty-button-dash-1 fix-1 color_3\",\n          onClick: () => PutPayElement(element, button),\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-icon\",\n            children: /*#__PURE__*/_jsx(\"img\", {\n              src: \"/static/img/favicons/app/shop_w.svg\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-tag\",\n            children: [\"$\", numberWithComas(parseFloat(price).toFixed(2)), \" \", button.name]\n          })]\n        }, `button_${indexB}`);\n      });\n      description = description.map((element, i) => {\n        return /*#__PURE__*/_jsx(\"div\", {\n          className: \"sty-tag-1\",\n          children: element\n        });\n      });\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12 col-md-4\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-card-price\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: `text-center sty-title sty-color-${colorCont}`,\n            children: element.name\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-cont-tag\",\n            children: [description, elementsBlank]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"text-center sty-cont-button\",\n            children: buttons\n          })]\n        })\n      }, `plan_${index}`);\n    });\n    setPlans(elements);\n  };\n\n  const PutPayElement = async (plan, subscription) => {\n    if (parseInt(subscription.price.amount) == 0) {\n      loadElement(true);\n      let params = {\n        price: subscription.id\n      };\n      let req = await request(subscription.post_subscription, params, null, {\n        locale\n      }, true, false);\n      loadElement(false);\n\n      if (req != null) {\n        message_1(getTagLang(\"validation\", \"pay_message_1\"));\n        router.push(\"/dashboard\");\n      }\n    } else {\n      putObjectSignUp(_objectSpread(_objectSpread({}, objectsSignUp), {}, {\n        selectedPlan: plan,\n        selectedSubscritpion: subscription\n      }));\n      router.push(\"/dashboard/profile/plan/pay\");\n    }\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: plans\n  });\n}","map":null,"metadata":{},"sourceType":"module"}