{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport * as Yup from \"yup\";\nimport { map } from \"lodash\";\nimport moment from \"moment\";\nimport useApp from \"../../../../../../hooks/useApp\";\nimport TagLang from \"../../../../../modules/GetTagLang\";\nimport MessageValidation from \"../../../../../modules/Forms/MessageValidation\";\nimport request from \"../../../../../../helper/core_services/core/requestService\";\nimport apiMedicalRecords from \"../../../../../../helper/core_services/endpoints/medical_records\";\nimport menu from \"../../../../../../helper/core_services/endpoints/menu\";\nimport GetLanguages from \"../../../../../../helper/i18n/getValueTagLang\";\nimport { loadElement } from \"../../../../../../helper/appearance/load\";\nimport FormSubContHabitual from \"./FormSubContHabitual\";\nimport FieldRadio from \"../../../../../../helper/forms/elements/radio\";\nconst icon_title = \"/static/img/favicons/app/icon_nu_1.png\";\n\nconst getTime = id => {\n  let time = null;\n\n  switch (id) {\n    case 1:\n      time = \"08:00\";\n      break;\n\n    case 3:\n      time = \"12:00\";\n      break;\n\n    case 2:\n      time = \"14:00\";\n      break;\n\n    case 4:\n      time = \"18:00\";\n      break;\n\n    case 5:\n      time = \"20:00\";\n      break;\n\n    default:\n      time = \"08:00\";\n      break;\n  }\n\n  return time;\n};\n\nconst valuesRadioInit = [{\n  tag: /*#__PURE__*/_jsx(TagLang, {\n    group: \"input\",\n    tag: \"no\"\n  }),\n  value: false\n}, {\n  tag: /*#__PURE__*/_jsx(TagLang, {\n    group: \"input\",\n    tag: \"yes\"\n  }),\n  value: true\n}];\nexport default function FormDietetic({\n  idPatient = null,\n  setFormDiet,\n  setFlagSendDiet\n}) {\n  const {\n    locale\n  } = useApp();\n  const {\n    0: flagsFields,\n    1: setFlagsFields\n  } = useState({});\n  const {\n    0: valuesRadio,\n    1: setValuesRadio\n  } = useState([]);\n  const formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData, {\n      resetForm\n    }) => {\n      if (idPatient == null) SendForm(formData, resetForm);\n      if (idPatient != null) UpdateForm(formData);\n    }\n  });\n  useEffect(() => {\n    setFormDiet(formik);\n  }, []);\n  useEffect(() => {\n    if (idPatient != null) getInformation();\n  }, [idPatient]);\n  useEffect(() => {\n    GetFlagsActive();\n  }, []);\n  useEffect(() => {\n    GetDietHabitual();\n  }, []);\n  useEffect(() => {\n    setValuesRadio(valuesRadioInit);\n  }, [locale]);\n\n  const GetFlagsActive = async () => {\n    let req = await request(apiMedicalRecords.get_settings_medical, null, null, {\n      locale\n    }, false);\n\n    if (req != null) {\n      setFlagsFields(req);\n    }\n  };\n\n  const getInformation = async () => {\n    let values = [];\n    let req = await request(apiMedicalRecords.get_diet, null, [idPatient], {\n      locale\n    }, false);\n\n    if (req != null) {\n      values = _objectSpread({}, req);\n    }\n\n    let reqType = await request(menu.get_meals_type, null, null, locale);\n    let reqMeal = await request(apiMedicalRecords.get_meal, null, [idPatient], {\n      locale\n    }, false);\n    let diets = map(reqType, (element, index) => {\n      let time = getTime(element.id);\n      let find = reqMeal.find(obj => {\n        return obj.type == element.id;\n      });\n      if (find == undefined) return _objectSpread(_objectSpread({}, element), {}, {\n        time: moment(`${moment().format(\"YYYY-MM-DD\")} ${time}`).toDate(),\n        diet: \"\",\n        place: \"\",\n        type: element.id\n      });else {\n        return _objectSpread(_objectSpread({}, element), {}, {\n          time: moment(`${moment().format(\"YYYY-MM-DD\")} ${find.time}`).toDate(),\n          diet: find.diet,\n          place: find.place,\n          type: element.id\n        });\n      }\n    });\n    values.diets = diets;\n    formik.setValues(values);\n  };\n\n  const GetDietHabitual = async () => {\n    let req = await request(menu.get_meals_type, null, null, {\n      locale\n    });\n\n    if (req != null) {\n      let initFormik = map(req, element => {\n        let time = getTime(element.id);\n        return _objectSpread(_objectSpread({}, element), {}, {\n          time: moment(`${moment().format(\"YYYY-MM-DD\")}T${time}`).toDate(),\n          diet: \"\",\n          place: \"\",\n          type: element.id\n        });\n      });\n      formik.setFieldValue(\"diets\", initFormik);\n    }\n  };\n\n  const SendForm = async formData => {\n    loadElement(true);\n    await request(apiMedicalRecords.post_new_diet, formData, [formData.idUser], {\n      locale\n    });\n    await SaveMeals(formData, {\n      idUser: formData.idUser\n    });\n    setFlagSendDiet(true);\n  };\n\n  const SaveMeals = async (formData, info) => {\n    let arrayRequest = [];\n    map(formData.diets, element => {\n      if (element.diet != \"\" && element.place != \"\") {\n        let params = _objectSpread({}, element);\n\n        params.time = `${moment(params.time).format(`HH:mm`)}:00`;\n        arrayRequest.push(request(apiMedicalRecords.post_new_meal, params, [info.idUser], {\n          locale\n        }));\n      }\n    });\n    loadElement(true);\n    await Promise.all(arrayRequest);\n    loadElement(false);\n  };\n\n  const UpdateForm = async formData => {\n    loadElement(true);\n    await request(apiMedicalRecords.patch_diet, formData, [idPatient], {\n      locale\n    });\n    let diets = [];\n    map(formData.diets, element => {\n      if (element.diet != \"\" && element.place != \"\") {\n        let params = _objectSpread({}, element);\n\n        params.time = `${moment(params.time).format(`HH:mm`)}:00`;\n        diets.push(params);\n      }\n    });\n    await request(apiMedicalRecords.put_meal, diets, [idPatient], {\n      locale\n    });\n    loadElement(false);\n    setFlagSendDiet(true);\n  };\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"diet_text\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"textarea\", {\n              name: `previousDiet`,\n              value: formik.values.previousDiet,\n              onChange: formik.handleChange,\n              rows: 3\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.previousDiet\n            })]\n          })]\n        })\n      }), (flagsFields === null || flagsFields === void 0 ? void 0 : flagsFields.alcohol) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"alcohol\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(FieldRadio, {\n              formik: formik,\n              name: \"alcohol\",\n              values: valuesRadio\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.alcohol\n            })]\n          })]\n        })\n      }), (flagsFields === null || flagsFields === void 0 ? void 0 : flagsFields.smoke) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"smoke\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(FieldRadio, {\n              formik: formik,\n              name: \"smoke\",\n              values: valuesRadio\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.smoke\n            })]\n          })]\n        })\n      }), (flagsFields === null || flagsFields === void 0 ? void 0 : flagsFields.meals) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"how_many_foods\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"input\", {\n              name: `meals`,\n              value: formik.values.meals,\n              onChange: formik.handleChange,\n              type: \"number\"\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.meals\n            })]\n          })]\n        })\n      }), (flagsFields === null || flagsFields === void 0 ? void 0 : flagsFields.allergies) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"allergies_text\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"textarea\", {\n              name: `allergies`,\n              value: formik.values.allergies,\n              onChange: formik.handleChange,\n              rows: 3\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.allergies\n            })]\n          })]\n        })\n      }), (flagsFields === null || flagsFields === void 0 ? void 0 : flagsFields.restrictions) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"restrictions_text\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"textarea\", {\n              name: `restrictions`,\n              value: formik.values.restrictions,\n              onChange: formik.handleChange,\n              rows: 3\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.restrictions\n            })]\n          })]\n        })\n      }), (flagsFields === null || flagsFields === void 0 ? void 0 : flagsFields.dislikes) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"dislikes_text\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"textarea\", {\n              name: `dislikes`,\n              value: formik.values.dislikes,\n              onChange: formik.handleChange,\n              rows: 3\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.dislikes\n            })]\n          })]\n        })\n      }), (flagsFields === null || flagsFields === void 0 ? void 0 : flagsFields.preferred) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"like_food\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"textarea\", {\n              name: `preferred`,\n              value: formik.values.preferred,\n              onChange: formik.handleChange,\n              rows: 3\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.preferred\n            })]\n          })]\n        })\n      }), (flagsFields === null || flagsFields === void 0 ? void 0 : flagsFields.dietNotes) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"notes\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"textarea\", {\n              name: `notes`,\n              value: formik.values.notes,\n              onChange: formik.handleChange,\n              rows: 3\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.notes\n            })]\n          })]\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"sty-title-secction-1\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"text\",\n        children: /*#__PURE__*/_jsx(TagLang, {\n          group: \"input\",\n          tag: \"usual_diet\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"icon\",\n        children: /*#__PURE__*/_jsx(\"img\", {\n          src: icon_title\n        })\n      })]\n    }), /*#__PURE__*/_jsx(FormikProvider, {\n      value: formik,\n      children: /*#__PURE__*/_jsx(FieldArray, {\n        name: \"diets\",\n        render: arrayHelpers => /*#__PURE__*/_jsx(FormSubContHabitual, {\n          formik: formik,\n          arrayHelpers: arrayHelpers,\n          father: \"diets\"\n        })\n      })\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"row\",\n      children: [(flagsFields === null || flagsFields === void 0 ? void 0 : flagsFields.water) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"water\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(\"textarea\", {\n              name: `water`,\n              value: formik.values.water,\n              onChange: formik.handleChange,\n              rows: 3\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.water\n            })]\n          })]\n        })\n      }), (flagsFields === null || flagsFields === void 0 ? void 0 : flagsFields.coffee) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"sty-cont-input-2\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"sty-tag\",\n            children: /*#__PURE__*/_jsx(TagLang, {\n              group: \"input\",\n              tag: \"coffee\"\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-input\",\n            children: [/*#__PURE__*/_jsx(FieldRadio, {\n              formik: formik,\n              name: \"coffee\",\n              values: valuesRadio\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.coffee\n            })]\n          })]\n        })\n      })]\n    })]\n  });\n}\n\nfunction initialValues() {\n  return {\n    previousDiet: \"\",\n    alcohol: false,\n    smoke: false,\n    meals: 0,\n    allergies: \"\",\n    restrictions: \"\",\n    dislikes: \"\",\n    preferred: \"\",\n    notes: \"\",\n    diets: [],\n    water: \"\",\n    coffee: false\n  };\n}\n\nfunction validationSchema() {\n  return {};\n}","map":null,"metadata":{},"sourceType":"module"}