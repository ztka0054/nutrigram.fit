{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { map, size } from \"lodash\";\nimport useApp from \"../../../../../../../../hooks/useApp\";\nimport TagLang from \"../../../../../../../modules/GetTagLang\";\nimport request from \"../../../../../../../../helper/core_services/core/requestService\";\nimport consulation from \"../../../../../../../../helper/core_services/endpoints/consulation\";\nexport default function FormContAntrophometric(_ref) {\n  var _formik$values;\n\n  var formik = _ref.formik,\n      father = _ref.father;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useApp = useApp(),\n      locale = _useApp.locale;\n\n  useEffect(function () {\n    if (formik.values.date != \"\") GetValuePast(formik.values.date);\n  }, [formik === null || formik === void 0 ? void 0 : (_formik$values = formik.values) === null || _formik$values === void 0 ? void 0 : _formik$values.date]);\n\n  var GetValuePast = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(date) {\n      var reqLast;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return request(consulation.get_consulations, {\n                ordering: \"-datetime\",\n                datetime__lt: \"\".concat(date, \"T23:59:59\"),\n                page_size: 1\n              }, [query.id], {\n                locale: locale\n              });\n\n            case 2:\n              reqLast = _context.sent;\n              if (reqLast != null) if (size(reqLast.result) > 0) {// formik.setFieldValue(\n                //     `${father}[${index}].past`,\n                //     URL.createObjectURL(e.target.files[0])\n                // );\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function GetValuePast(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: map(formik.values[father], function (content, index) {\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: \"col-12 col-md-6\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"row col-12 sty-row-trait\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"sty-cont-input-3-1\",\n              children: /*#__PURE__*/_jsx(\"div\", {\n                className: \"text\",\n                children: content.traitName\n              })\n            })\n          }), content.supportsGoal && /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"col-4\",\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"sty-cont-input-2-1\",\n                  children: [/*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-tag\",\n                    children: /*#__PURE__*/_jsx(TagLang, {\n                      group: \"input\",\n                      tag: \"goal\"\n                    })\n                  }), /*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-input\",\n                    children: /*#__PURE__*/_jsx(\"input\", {\n                      name: \"\".concat(father, \"[\").concat(index, \"].goal\"),\n                      value: formik.values[father][index].goal,\n                      onChange: formik.handleChange,\n                      type: \"number\",\n                      step: \"0.01\",\n                      min: \"0\"\n                    })\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"col-4\",\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"sty-cont-input-2-1\",\n                  children: [/*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-tag\",\n                    children: /*#__PURE__*/_jsx(TagLang, {\n                      group: \"input\",\n                      tag: \"previous\"\n                    })\n                  }), /*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-input\",\n                    children: /*#__PURE__*/_jsx(\"input\", {\n                      name: \"\".concat(father, \"[\").concat(index, \"].past\"),\n                      value: formik.values[father][index].past,\n                      onChange: formik.handleChange,\n                      disabled: true,\n                      type: \"number\",\n                      step: \"0.01\",\n                      min: \"0\"\n                    })\n                  })]\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"col-4\",\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"sty-cont-input-2-1\",\n                  children: [/*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-tag\",\n                    children: /*#__PURE__*/_jsx(TagLang, {\n                      group: \"input\",\n                      tag: \"current\"\n                    })\n                  }), /*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-input\",\n                    children: /*#__PURE__*/_jsx(\"input\", {\n                      name: \"\".concat(father, \"[\").concat(index, \"].value\"),\n                      value: formik.values[father][index].value,\n                      onChange: formik.handleChange,\n                      type: \"number\",\n                      step: \"0.01\",\n                      min: \"0\"\n                    })\n                  })]\n                })\n              })]\n            })\n          }), !content.supportsGoal && /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"col-4\"\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"col-4\"\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"col-4\",\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"sty-cont-input-2-1\",\n                  children: [/*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-tag\",\n                    children: /*#__PURE__*/_jsx(TagLang, {\n                      group: \"input\",\n                      tag: \"value\"\n                    })\n                  }), /*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-input\",\n                    children: /*#__PURE__*/_jsx(\"input\", {\n                      name: \"\".concat(father, \"[\").concat(index, \"].value\"),\n                      value: formik.values[father][index].value,\n                      onChange: formik.handleChange,\n                      type: \"number\",\n                      step: \"0.01\",\n                      min: \"0\"\n                    })\n                  })]\n                })\n              })]\n            })\n          })]\n        })\n      }, \"antropho_\".concat(index));\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}