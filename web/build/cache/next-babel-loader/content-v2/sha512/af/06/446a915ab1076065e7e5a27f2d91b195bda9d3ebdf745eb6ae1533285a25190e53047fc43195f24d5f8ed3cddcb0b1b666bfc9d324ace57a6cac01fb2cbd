{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport * as Yup from \"yup\";\nimport { map, size } from \"lodash\";\nimport moment from \"moment\";\nimport useApp from \"../../../../../../../../hooks/useApp\";\nimport TagLang from \"../../../../../../../modules/GetTagLang\";\nimport MessageValidation from \"../../../../../../../modules/Forms/MessageValidation\";\nimport request from \"../../../../../../../../helper/core_services/core/requestService\";\nimport consulation from \"../../../../../../../../helper/core_services/endpoints/consulation\";\nimport patient from \"../../../../../../../../helper/core_services/endpoints/patients\";\nimport apiMenu from \"../../../../../../../../helper/core_services/endpoints/menu\";\nimport Getlanguage from \"../../../../../../../../helper/i18n/getValueTagLang\";\nimport { harris, mifflin, owen, oms, average } from \"../../../../../../../../helper/calculations/energy\";\nimport fixDate from \"../../../../../../../../helper/date/fixDateTimeService\";\nimport { message_1 } from \"../../../../../../../../helper/appearance/messages\";\nimport { loadElement } from \"../../../../../../../../helper/appearance/load\";\nimport FieldRadio from \"../../../../../../../../helper/forms/elements/radio\";\nimport InputTextForm_1 from \"../../../../../../../../components/components/Inputs/InputTypeForm_1/InputTextForm_1\";\nimport InputTextAreaForm_1 from \"../../../../../../../../components/components/Inputs/InputTypeForm_1/InputTextAreaForm_1\";\nimport InputTimeForm_1 from \"../../../../../../../../components/components/Inputs/InputTypeForm_1/InputTimeForm_1\";\nimport InputDate_1 from \"../../../../../../../../components/components/Inputs/InputTypeForm_1/InputDate_1\";\nimport FormContQuestionnarie from \"./FormContQuestionnarie\";\nimport FormContAntrophometric from \"./FormContAntrophometric\";\nimport FormContFolds from \"./FormContFolds\";\nimport FormContFoldsCircunferences from \"./FormContFoldsCircunferences\";\nimport SectionMenu from \"../SectionMenu\";\nimport getTimeZoneDate from \"../../../../../../../../helper/date/getTimeZoneDate\";\nimport ScrollError from \"../../../../../../../../helper/scroll/ScrollError\";\nvar icon_title = \"/static/img/favicons/app/icon_nu_1.png\";\nvar idAntropo = 0;\nvar idFolds = 1;\nvar idCircum = 2;\nexport default function FormConsulation(_ref) {\n  var idConsulation = _ref.idConsulation,\n      ShowConsults = _ref.ShowConsults,\n      dataPatient = _ref.dataPatient,\n      setRefreshPatient = _ref.setRefreshPatient,\n      dataMenuPatient = _ref.dataMenuPatient;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query,\n      locale = _useRouter.locale;\n\n  var _useApp = useApp(),\n      putFlagChangeElement = _useApp.putFlagChangeElement;\n\n  var _useState = useState({}),\n      flagSettings = _useState[0],\n      setFlagSettings = _useState[1];\n\n  var _useState2 = useState([]),\n      valuesActivity = _useState2[0],\n      setValuesActivity = _useState2[1];\n\n  var _useState3 = useState(0),\n      averageEnergy = _useState3[0],\n      setAverageEnergy = _useState3[1];\n\n  var _useState4 = useState(false),\n      flagFollow = _useState4[0],\n      setFlagFollow = _useState4[1];\n\n  var _useState5 = useState(1),\n      stateConsult = _useState5[0],\n      setStateConsult = _useState5[1];\n\n  var _useState6 = useState(null),\n      dataMenu = _useState6[0],\n      setDataMenu = _useState6[1];\n\n  var _useState7 = useState(null),\n      nameMenu = _useState7[0],\n      setNameMenu = _useState7[1];\n\n  var _useState8 = useState(null),\n      dataConsulation = _useState8[0],\n      setDataConsulation = _useState8[1];\n\n  var formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData, _ref2) {\n        var resetForm;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref2.resetForm;\n                if (idConsulation == null) SendForm(formData, resetForm);\n                if (idConsulation != null) SendUpdate(formData, resetForm);\n                setRefreshPatient(true);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSubmit(_x, _x2) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n\n  var SendForm = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(formData, resetForm) {\n      var newData, menuPatient, reqConsulation, paramsAntropo, arrayRequest;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              newData = _objectSpread({}, formData);\n              _context2.next = 3;\n              return SaveMenu();\n\n            case 3:\n              menuPatient = _context2.sent;\n              if (menuPatient != null) newData.patientMenu = menuPatient;\n              newData.datetime = getTimeZoneDate(\"\".concat(newData.date, \"T\").concat(newData.hour));\n              console.log(\"\".concat(newData.date, \"T\").concat(newData.hour));\n              loadElement(true);\n              _context2.next = 10;\n              return request(consulation.post_consulation, newData, [query.id], {\n                locale: locale\n              });\n\n            case 10:\n              reqConsulation = _context2.sent;\n\n              if (!(reqConsulation != null)) {\n                _context2.next = 23;\n                break;\n              }\n\n              paramsAntropo = {\n                consultation: reqConsulation.id,\n                datetime: newData.datetime,\n                measurements: [].concat(_toConsumableArray(formData.anthropometrys), _toConsumableArray(formData.folds), _toConsumableArray(formData.circumferences))\n              };\n              _context2.next = 15;\n              return request(consulation.post_anthropometry, paramsAntropo, [query.id], {\n                locale: locale\n              });\n\n            case 15:\n              arrayRequest = [];\n              map([].concat(_toConsumableArray(formData.anthropometrys), _toConsumableArray(formData.folds), _toConsumableArray(formData.circumferences)), function (element) {\n                var paramTrait = {\n                  trait: element.trait,\n                  goal: element.goal\n                };\n                if (element !== null && element !== void 0 && element.id) arrayRequest.push(request(consulation.patch_trait_patient, paramTrait, [query.id, element.id], {\n                  locale: locale\n                }));\n                if (!(element !== null && element !== void 0 && element.id)) arrayRequest.push(request(consulation.post_trait_patient, paramTrait, [query.id], {\n                  locale: locale\n                }));\n              });\n              _context2.next = 19;\n              return Promise.all(arrayRequest);\n\n            case 19:\n              loadElement(false);\n              ShowConsults();\n              putFlagChangeElement();\n              message_1(Getlanguage(\"validation\", \"message_1\"));\n\n            case 23:\n              setRefreshPatient(true);\n              resetForm();\n\n            case 25:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function SendForm(_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var SendUpdate = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(formData) {\n      var newData, reqConsulation, arrayRequest, paramsAntropo;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              newData = _objectSpread({}, formData);\n              delete newData.anthropometrys;\n              delete newData.folds;\n              delete newData.circumferences;\n              newData.datetime = getTimeZoneDate(\"\".concat(newData.date, \"T\").concat(moment(newData.hour).format(\"HH:mm:ss\")));\n              loadElement(true);\n              _context3.next = 8;\n              return request(consulation.patch_consulation, newData, [query.id, idConsulation], {\n                locale: locale\n              });\n\n            case 8:\n              reqConsulation = _context3.sent;\n              arrayRequest = [];\n\n              if (!(reqConsulation != null)) {\n                _context3.next = 15;\n                break;\n              }\n\n              paramsAntropo = {\n                consultation: reqConsulation.id,\n                datetime: newData.datetime,\n                measurements: [].concat(_toConsumableArray(formData.anthropometrys), _toConsumableArray(formData.folds), _toConsumableArray(formData.circumferences))\n              };\n              _context3.next = 14;\n              return request(consulation.patch_anthropometry, paramsAntropo, [query.id, newData.idAnthropometry], {\n                locale: locale\n              });\n\n            case 14:\n              map([].concat(_toConsumableArray(formData.anthropometrys), _toConsumableArray(formData.folds), _toConsumableArray(formData.circumferences)), function (element) {\n                var paramTrait = {\n                  trait: element.trait,\n                  goal: element.goal\n                };\n                arrayRequest.push(request(consulation.patch_trait_patient, paramTrait, [query.id, element.id], {\n                  locale: locale\n                }));\n              });\n\n            case 15:\n              _context3.next = 17;\n              return Promise.all(arrayRequest);\n\n            case 17:\n              loadElement(false);\n              ShowConsults();\n              putFlagChangeElement();\n              message_1(Getlanguage(\"validation\", \"message_1\"));\n              setRefreshPatient(true);\n              resetForm();\n\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function SendUpdate(_x5) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    GetCuestionnarie();\n    GetValuesActivity();\n  }, [locale]);\n  useEffect(function () {\n    if (query !== null && query !== void 0 && query.id) ValidateFirstConsulation();\n  }, [query]);\n\n  var ValidateFirstConsulation = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var reqConsultation;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return request(consulation.get_consulations, {\n                page_size: 1\n              }, [query.id], {\n                locale: locale\n              });\n\n            case 2:\n              reqConsultation = _context4.sent;\n              // let finf;\n              if (size(reqConsultation.result) > 0) setFlagFollow(true);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function ValidateFirstConsulation() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (query !== null && query !== void 0 && query.id) {\n      if (idConsulation != null) GetDataUpdate();else GetTraits(query.id);\n    }\n  }, [query, locale, idConsulation]);\n  useEffect(function () {\n    GetSettings();\n  }, []);\n  useEffect(function () {\n    if (dataPatient != null) EnergyCalculation();\n  }, [dataPatient, flagSettings, formik.values.anthropometrys]);\n  useEffect(function () {\n    PhisicalActivity();\n  }, [averageEnergy, formik.values]);\n\n  var GetDataUpdate = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var req, answers, values, traitsPatient, arrayAntropo, arrayFolds, arrayCircumf;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return request(consulation.get_consulation, null, [query.id, idConsulation], {\n                locale: locale\n              });\n\n            case 2:\n              req = _context5.sent;\n\n              if (!(req != null)) {\n                _context5.next = 19;\n                break;\n              }\n\n              setDataConsulation(req);\n              answers = map(req.answers, function (element) {\n                return {\n                  question_tag: element.question.question,\n                  question: element.question.id,\n                  answer: element.answer\n                };\n              });\n              values = {\n                date: fixDate(req.datetime).format(\"YYYY-MM-DD\"),\n                hour: fixDate(req.datetime).toDate(),\n                notes: req.notes,\n                activity: req.activity,\n                answers: answers,\n                idAnthropometry: req.anthropometry.id\n              };\n              _context5.next = 9;\n              return request(consulation.get_traits_patient, null, [query.id], {\n                locale: locale\n              });\n\n            case 9:\n              traitsPatient = _context5.sent;\n              arrayAntropo = [];\n              arrayFolds = [];\n              arrayCircumf = [];\n              map(traitsPatient, function (element) {\n                var finder = req.anthropometry.measurements.find(function (obj) {\n                  return obj.trait.id === element.trait.id;\n                });\n\n                if (finder != undefined) {\n                  var params = {\n                    id: element.id,\n                    trait: element.trait.id,\n                    traitName: element.trait.name,\n                    supportsGoal: element.trait.supportsGoal,\n                    identifier: element.trait.identifier,\n                    value: finder.value,\n                    goal: element.goal\n                  };\n                  if (element.trait.group == idAntropo) arrayAntropo.push(params);\n                  if (element.trait.group == idFolds) arrayFolds.push(params);\n                  if (element.trait.group == idCircum) arrayCircumf.push(params);\n                }\n              });\n              values.anthropometrys = arrayAntropo;\n              values.folds = arrayFolds;\n              values.circumferences = arrayCircumf;\n              formik.setValues(values);\n              GetActualValuesUpdate(fixDate(req.datetime).format(\"YYYY-MM-DD\"), arrayAntropo, arrayFolds, arrayCircumf);\n\n            case 19:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function GetDataUpdate() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var GetValuesActivity = function GetValuesActivity() {\n    setValuesActivity([{\n      tag: Getlanguage(\"input\", \"light\"),\n      value: \"1\"\n    }, {\n      tag: Getlanguage(\"input\", \"moderate\"),\n      value: \"2\"\n    }, {\n      tag: Getlanguage(\"input\", \"heavy\"),\n      value: \"3\"\n    }]);\n  };\n\n  var GetSettings = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var req;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return request(consulation.get_settings, null, null, {\n                locale: locale\n              });\n\n            case 2:\n              req = _context6.sent;\n\n              if (req != null) {\n                setFlagSettings(req);\n              }\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function GetSettings() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var GetCuestionnarie = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var req, questions;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return request(consulation.get_questions, null, null, {\n                locale: locale\n              });\n\n            case 2:\n              req = _context7.sent;\n              questions = map(req, function (element, index) {\n                return {\n                  question_tag: element.question,\n                  question: element.id\n                };\n              });\n              formik.setFieldValue(\"answers\", questions);\n\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function GetCuestionnarie() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var GetTraits = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(idPatient) {\n      var traits, traitsPatient, arrayAntropo, arrayFolds, arrayCircumf;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return request(consulation.get_traits, null, null, locale);\n\n            case 2:\n              traits = _context8.sent;\n              _context8.next = 5;\n              return request(consulation.get_traits_patient, null, [idPatient], {\n                locale: locale\n              });\n\n            case 5:\n              traitsPatient = _context8.sent;\n\n              if (traits != null) {\n                arrayAntropo = [];\n                arrayFolds = [];\n                arrayCircumf = [];\n                map(traits, function (element, i) {\n                  var params = {\n                    trait: element.id,\n                    traitName: element.name,\n                    supportsGoal: element.supportsGoal,\n                    identifier: element.identifier,\n                    past: 0,\n                    value: 0,\n                    goal: 0\n                  };\n                  var find = traitsPatient.find(function (obj) {\n                    return obj.trait.id === element.id;\n                  });\n\n                  if (find != undefined) {\n                    params.id = find.id;\n                    params.goal = find.goal;\n                  }\n\n                  if (element.group == idAntropo) arrayAntropo.push(params);\n                  if (element.group == idFolds) arrayFolds.push(params);\n                  if (element.group == idCircum) arrayCircumf.push(params);\n                });\n                formik.setFieldValue(\"anthropometrys\", arrayAntropo);\n                formik.setFieldValue(\"folds\", arrayFolds);\n                formik.setFieldValue(\"circumferences\", arrayCircumf);\n                GetActualValues(arrayAntropo, arrayFolds, arrayCircumf);\n              }\n\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function GetTraits(_x6) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var GetActualValues = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(arrayAntropo, arrayFolds, arrayCircumf) {\n      var reqLast, req;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return request(consulation.get_consulations, {\n                ordering: \"-datetime\",\n                // datetime__lt: `${date}T23:59:59`,\n                page_size: 1\n              }, [query.id], {\n                locale: locale\n              });\n\n            case 2:\n              reqLast = _context9.sent;\n\n              if (!(reqLast != null)) {\n                _context9.next = 9;\n                break;\n              }\n\n              if (!(size(reqLast.result) > 0)) {\n                _context9.next = 9;\n                break;\n              }\n\n              _context9.next = 7;\n              return request(consulation.get_consulation, null, [query.id, reqLast.result[0].id], {\n                locale: locale\n              });\n\n            case 7:\n              req = _context9.sent;\n\n              if (req != null) {\n                map(arrayAntropo, function (element, index) {\n                  var find = req.anthropometry.measurements.find(function (obj) {\n                    return obj.trait.id === element.trait;\n                  });\n\n                  if (find != undefined) {\n                    if (element.supportsGoal) formik.setFieldValue(\"anthropometrys[\".concat(index, \"].past\"), find.value);\n                    if (!element.supportsGoal) formik.setFieldValue(\"anthropometrys[\".concat(index, \"].value\"), find.value);\n                  }\n                });\n                map(arrayFolds, function (element, index) {\n                  var find = req.anthropometry.measurements.find(function (obj) {\n                    return obj.trait.id === element.trait;\n                  });\n\n                  if (find != undefined) {\n                    if (element.supportsGoal) formik.setFieldValue(\"folds[\".concat(index, \"].past\"), find.value);\n                    if (!element.supportsGoal) formik.setFieldValue(\"folds[\".concat(index, \"].value\"), find.value);\n                  }\n                });\n                map(arrayCircumf, function (element, index) {\n                  var find = req.anthropometry.measurements.find(function (obj) {\n                    return obj.trait.id === element.trait;\n                  });\n\n                  if (find != undefined) {\n                    if (element.supportsGoal) formik.setFieldValue(\"circumferences[\".concat(index, \"].past\"), find.value);\n                    if (!element.supportsGoal) formik.setFieldValue(\"circumferences[\".concat(index, \"].value\"), find.value);\n                  }\n                });\n              }\n\n            case 9:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function GetActualValues(_x7, _x8, _x9) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var GetActualValuesUpdate = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(date, arrayAntropo, arrayFolds, arrayCircumf) {\n      var reqLast, req;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return request(consulation.get_consulations, {\n                ordering: \"-datetime\",\n                datetime__lt: \"\".concat(date, \"T00:00:00\"),\n                page_size: 1\n              }, [query.id], {\n                locale: locale\n              });\n\n            case 2:\n              reqLast = _context10.sent;\n\n              if (!(reqLast != null)) {\n                _context10.next = 9;\n                break;\n              }\n\n              if (!(size(reqLast.result) > 0)) {\n                _context10.next = 9;\n                break;\n              }\n\n              _context10.next = 7;\n              return request(consulation.get_consulation, null, [query.id, reqLast.result[0].id], {\n                locale: locale\n              });\n\n            case 7:\n              req = _context10.sent;\n\n              if (req != null) {\n                map(arrayAntropo, function (element, index) {\n                  var find = req.anthropometry.measurements.find(function (obj) {\n                    return obj.trait.id === element.trait;\n                  });\n\n                  if (find != undefined) {\n                    if (element.supportsGoal) formik.setFieldValue(\"anthropometrys[\".concat(index, \"].past\"), find.value);\n                  }\n                });\n                map(arrayFolds, function (element, index) {\n                  var find = req.anthropometry.measurements.find(function (obj) {\n                    return obj.trait.id === element.trait;\n                  });\n\n                  if (find != undefined) {\n                    if (element.supportsGoal) formik.setFieldValue(\"folds[\".concat(index, \"].past\"), find.value);\n                  }\n                });\n                map(arrayCircumf, function (element, index) {\n                  var find = req.anthropometry.measurements.find(function (obj) {\n                    return obj.trait.id === element.trait;\n                  });\n\n                  if (find != undefined) {\n                    if (element.supportsGoal) formik.setFieldValue(\"circumferences[\".concat(index, \"].past\"), find.value);\n                  }\n                });\n              }\n\n            case 9:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function GetActualValuesUpdate(_x10, _x11, _x12, _x13) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var EnergyCalculation = function EnergyCalculation() {\n    var arrayAverage = [];\n    var height = formik === null || formik === void 0 ? void 0 : formik.values[\"anthropometrys\"].find(function (obj) {\n      return obj.identifier == 1;\n    });\n    var weight = formik === null || formik === void 0 ? void 0 : formik.values[\"anthropometrys\"].find(function (obj) {\n      return obj.identifier == 2;\n    });\n\n    if (height != undefined && weight != undefined) {\n      if (flagSettings !== null && flagSettings !== void 0 && flagSettings.harris) {\n        var valHarris = harris(dataPatient.gender, weight.value, height.value, dataPatient.age);\n        formik.setFieldValue(\"harris\", valHarris.toFixed(2));\n        arrayAverage.push(valHarris);\n      }\n\n      if (flagSettings !== null && flagSettings !== void 0 && flagSettings.mifflin) {\n        var valMifflin = mifflin(dataPatient.gender, weight.value, height.value, dataPatient.age);\n        formik.setFieldValue(\"mifflin\", valMifflin.toFixed(2));\n        arrayAverage.push(valMifflin);\n      }\n\n      if (flagSettings !== null && flagSettings !== void 0 && flagSettings.owen) {\n        var valOwen = owen(dataPatient.gender, weight.value);\n        formik.setFieldValue(\"owen\", valOwen.toFixed(2));\n        arrayAverage.push(valOwen);\n      }\n\n      if (flagSettings !== null && flagSettings !== void 0 && flagSettings.fao) {\n        var valOMS = oms(dataPatient.gender, weight.value, dataPatient.age);\n        formik.setFieldValue(\"fao\", valOMS.toFixed(2));\n        arrayAverage.push(valOMS);\n      }\n\n      if (flagSettings !== null && flagSettings !== void 0 && flagSettings.average) {\n        var valAverage = average(arrayAverage);\n        formik.setFieldValue(\"average\", valAverage.toFixed(2));\n        setAverageEnergy(valAverage);\n      }\n    }\n  };\n\n  var PhisicalActivity = function PhisicalActivity() {\n    var value = parseInt(formik.values[\"activity\"]);\n\n    if (value) {\n      var result = 0;\n      if (value == 1) result = averageEnergy * 1.3;\n      if (value == 2) result = averageEnergy * 1.4;\n      if (value == 3) result = averageEnergy * 1.5;\n      formik.setFieldValue(\"activity_cal\", result.toFixed(2));\n    }\n  };\n\n  var SaveMenu = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var resultMenu;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (!(dataMenu != null)) {\n                _context11.next = 7;\n                break;\n              }\n\n              _context11.next = 3;\n              return request(apiMenu.post_new_menu_patient, dataMenu, null, {\n                locale: locale\n              });\n\n            case 3:\n              resultMenu = _context11.sent;\n\n              if (!(dataMenu != null)) {\n                _context11.next = 6;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", resultMenu.id);\n\n            case 6:\n              return _context11.abrupt(\"return\", null);\n\n            case 7:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function SaveMenu() {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (dataPatient) GetMenuPatient();\n  }, [dataPatient, dataConsulation]);\n\n  var GetMenuPatient = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n      var resultMenuPatient, resultMenu, schedules, _dataMenu, reqPatientMenu, _resultMenu, _dataMenu2;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (!(dataPatient !== null && dataPatient !== void 0 && dataPatient.menu)) {\n                _context12.next = 22;\n                break;\n              }\n\n              if (!(idConsulation == null)) {\n                _context12.next = 12;\n                break;\n              }\n\n              _context12.next = 4;\n              return request(apiMenu.get_menu_patient, null, [dataPatient === null || dataPatient === void 0 ? void 0 : dataPatient.menu], {\n                locale: locale\n              });\n\n            case 4:\n              resultMenuPatient = _context12.sent;\n\n              if (!(resultMenuPatient != null)) {\n                _context12.next = 12;\n                break;\n              }\n\n              _context12.next = 8;\n              return request(apiMenu.get_menu, null, [resultMenuPatient.menu], {\n                locale: locale\n              });\n\n            case 8:\n              resultMenu = _context12.sent;\n              schedules = map(resultMenuPatient === null || resultMenuPatient === void 0 ? void 0 : resultMenuPatient.schedules, function (element) {\n                var _element$type, _element$type2;\n\n                return {\n                  type: element === null || element === void 0 ? void 0 : (_element$type = element.type) === null || _element$type === void 0 ? void 0 : _element$type.id,\n                  name: element === null || element === void 0 ? void 0 : (_element$type2 = element.type) === null || _element$type2 === void 0 ? void 0 : _element$type2.name,\n                  fromTime: element.fromTime,\n                  toTime: element.toTime\n                };\n              });\n              _dataMenu = {\n                patient: query.id,\n                menu: resultMenu === null || resultMenu === void 0 ? void 0 : resultMenu.id,\n                name: resultMenu === null || resultMenu === void 0 ? void 0 : resultMenu.name,\n                schedules: schedules\n              };\n              setDataMenu(_dataMenu);\n\n            case 12:\n              if (!(idConsulation != null)) {\n                _context12.next = 22;\n                break;\n              }\n\n              if (!(dataConsulation !== null && dataConsulation !== void 0 && dataConsulation.patientMenu)) {\n                _context12.next = 22;\n                break;\n              }\n\n              _context12.next = 16;\n              return request(apiMenu.get_menu_patient, null, [dataConsulation.patientMenu], {\n                locale: locale\n              });\n\n            case 16:\n              reqPatientMenu = _context12.sent;\n\n              if (!(reqPatientMenu != null)) {\n                _context12.next = 22;\n                break;\n              }\n\n              _context12.next = 20;\n              return request(apiMenu.get_menu, null, [reqPatientMenu.menu], {\n                locale: locale\n              });\n\n            case 20:\n              _resultMenu = _context12.sent;\n\n              if (_resultMenu != null) {\n                _dataMenu2 = {\n                  patient: query.id,\n                  menu: _resultMenu === null || _resultMenu === void 0 ? void 0 : _resultMenu.id,\n                  name: _resultMenu === null || _resultMenu === void 0 ? void 0 : _resultMenu.name\n                };\n                setDataMenu(_dataMenu2);\n              }\n\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function GetMenuPatient() {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if ((dataMenu === null || dataMenu === void 0 ? void 0 : dataMenu.name) != null) {\n      var name = \"\";\n      if (dataMenu.name == \"\") name = Getlanguage(\"input\", \"unnamed\");\n      if (dataMenu.name != \"\") name = dataMenu.name;\n      setNameMenu(name);\n    }\n  }, [dataMenu, locale]);\n\n  var ClickShowMenu = function ClickShowMenu() {\n    setStateConsult(2);\n  };\n\n  var ClickShowConsult = function ClickShowConsult() {\n    setStateConsult(1);\n  };\n\n  var ClickSend = function ClickSend() {\n    ScrollError();\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [stateConsult == 1 && /*#__PURE__*/_jsx(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"col-6\",\n              children: /*#__PURE__*/_jsx(InputDate_1, {\n                formik: formik,\n                title: \"date\",\n                name: \"date\",\n                value: formik.values.date,\n                error: formik.errors.date\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-6\",\n              children: /*#__PURE__*/_jsx(InputTimeForm_1, {\n                formik: formik,\n                title: \"hour\",\n                name: \"hour\",\n                value: formik.values.hour,\n                error: formik.errors.hour\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-12\",\n              children: /*#__PURE__*/_jsx(InputTextAreaForm_1, {\n                formik: formik,\n                title: \"note\",\n                name: \"notes\",\n                value: formik.values.notes,\n                error: formik.errors.notes\n              })\n            })\n          })\n        }), flagFollow && /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-12\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-title-secction-1\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"text\",\n              children: /*#__PURE__*/_jsx(TagLang, {\n                group: \"input\",\n                tag: \"questionnaire_consult\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"icon\",\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: icon_title\n              })\n            })]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsx(FormikProvider, {\n              value: formik,\n              children: /*#__PURE__*/_jsx(FieldArray, {\n                name: \"answers\",\n                render: function render(arrayHelpers) {\n                  return /*#__PURE__*/_jsx(FormContQuestionnarie, {\n                    formik: formik,\n                    arrayHelpers: arrayHelpers,\n                    father: \"answers\"\n                  });\n                }\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-title-secction-1\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"text\",\n              children: /*#__PURE__*/_jsx(TagLang, {\n                group: \"input\",\n                tag: \"anthropometry\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"icon\",\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: icon_title\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsx(FormikProvider, {\n              value: formik,\n              children: /*#__PURE__*/_jsx(FieldArray, {\n                name: \"anthropometrys\",\n                render: function render(arrayHelpers) {\n                  return /*#__PURE__*/_jsx(FormContAntrophometric, {\n                    formik: formik,\n                    arrayHelpers: arrayHelpers,\n                    father: \"anthropometrys\"\n                  });\n                }\n              })\n            })\n          })\n        }), /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-title-secction-1\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"text\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"input\",\n                  tag: \"folds\"\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"icon\",\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: icon_title\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsx(FormikProvider, {\n                value: formik,\n                children: /*#__PURE__*/_jsx(FieldArray, {\n                  name: \"folds\",\n                  render: function render(arrayHelpers) {\n                    return /*#__PURE__*/_jsx(FormContFolds, {\n                      formik: formik,\n                      arrayHelpers: arrayHelpers,\n                      father: \"folds\"\n                    });\n                  }\n                })\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-title-secction-1\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"text\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"input\",\n                  tag: \"circumference\"\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"icon\",\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: icon_title\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsx(FormikProvider, {\n                value: formik,\n                children: /*#__PURE__*/_jsx(FieldArray, {\n                  name: \"circumferences\",\n                  render: function render(arrayHelpers) {\n                    return /*#__PURE__*/_jsx(FormContFoldsCircunferences, {\n                      formik: formik,\n                      arrayHelpers: arrayHelpers,\n                      father: \"circumferences\"\n                    });\n                  }\n                })\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-title-secction-1\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"text\",\n              children: /*#__PURE__*/_jsx(TagLang, {\n                group: \"input\",\n                tag: \"energy_cal\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"icon\",\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: icon_title\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"col-3\",\n              children: /*#__PURE__*/_jsx(InputTextForm_1, {\n                formik: formik,\n                title: \"harris\",\n                name: \"harris\",\n                value: formik.values.harris,\n                error: formik.errors.harris,\n                disabled: true\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-3\",\n              children: /*#__PURE__*/_jsx(InputTextForm_1, {\n                formik: formik,\n                title: \"mifflin\",\n                name: \"mifflin\",\n                value: formik.values.mifflin,\n                error: formik.errors.mifflin,\n                disabled: true\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-3\",\n              children: /*#__PURE__*/_jsx(InputTextForm_1, {\n                formik: formik,\n                title: \"owen\",\n                name: \"owen\",\n                value: formik.values.owen,\n                error: formik.errors.owen,\n                disabled: true\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-3\",\n              children: /*#__PURE__*/_jsx(InputTextForm_1, {\n                formik: formik,\n                title: \"fao\",\n                name: \"fao\",\n                value: formik.values.fao,\n                error: formik.errors.fao,\n                disabled: true\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-3\",\n              children: /*#__PURE__*/_jsx(InputTextForm_1, {\n                formik: formik,\n                title: \"average\",\n                name: \"average\",\n                value: formik.values.average,\n                error: formik.errors.average,\n                disabled: true\n              })\n            })\n          })\n        }), /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"sty-title-secction-1\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"text\",\n                children: /*#__PURE__*/_jsx(TagLang, {\n                  group: \"input\",\n                  tag: \"physical_act\"\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"icon\",\n                children: /*#__PURE__*/_jsx(\"img\", {\n                  src: icon_title\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"col-12\",\n            children: [/*#__PURE__*/_jsx(FieldRadio, {\n              formik: formik,\n              name: \"activity\",\n              values: valuesActivity\n            }), /*#__PURE__*/_jsx(MessageValidation, {\n              error: formik.errors.activity\n            })]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsx(\"div\", {\n                className: \"col-6\",\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"sty-cont-input-2\",\n                  children: [/*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-tag\",\n                    children: /*#__PURE__*/_jsx(TagLang, {\n                      group: \"input\",\n                      tag: \"day_kcal\"\n                    })\n                  }), /*#__PURE__*/_jsx(\"div\", {\n                    className: \"sty-input\",\n                    children: /*#__PURE__*/_jsx(\"input\", {\n                      name: \"activity_cal\",\n                      value: formik.values.activity_cal,\n                      onChange: formik.handleChange,\n                      type: \"text\",\n                      disabled: true\n                    })\n                  })]\n                })\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"sty-title-secction-1\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"text\",\n              children: /*#__PURE__*/_jsx(TagLang, {\n                group: \"input\",\n                tag: \"menu\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"icon\",\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: icon_title\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"col-8\",\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                className: \"sty-cont-input-2\",\n                children: [/*#__PURE__*/_jsx(\"div\", {\n                  className: \"sty-tag\",\n                  children: /*#__PURE__*/_jsx(TagLang, {\n                    group: \"input\",\n                    tag: \"Assigned_menu\"\n                  })\n                }), /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"sty-value\",\n                  children: [nameMenu == null && /*#__PURE__*/_jsx(TagLang, {\n                    group: \"validation\",\n                    tag: \"without_assigned_menu\"\n                  }), nameMenu != null && /*#__PURE__*/_jsxs(_Fragment, {\n                    children: [\" \", nameMenu]\n                  })]\n                })]\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-4 text-right\",\n              children: idConsulation == null && /*#__PURE__*/_jsx(\"button\", {\n                className: \"sty-button-dash-1\",\n                onClick: function onClick() {\n                  return ClickShowMenu();\n                },\n                children: /*#__PURE__*/_jsx(\"div\", {\n                  className: \"sty-tag\",\n                  children: /*#__PURE__*/_jsx(TagLang, {\n                    group: \"input\",\n                    tag: \"select\"\n                  })\n                })\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-12 text-center sty-magin-b-1\",\n          children: /*#__PURE__*/_jsxs(\"button\", {\n            className: \"sty-button-dash-1\",\n            type: \"submit\",\n            onClick: function onClick() {\n              return ClickSend();\n            },\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"sty-icon\",\n              children: /*#__PURE__*/_jsx(\"img\", {\n                src: \"/static/img/favicons/app/save_w.svg\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"sty-tag\",\n              children: /*#__PURE__*/_jsx(TagLang, {\n                group: \"button\",\n                tag: \"save\"\n              })\n            })]\n          })\n        })]\n      })\n    }), stateConsult == 2 && /*#__PURE__*/_jsx(SectionMenu, {\n      dataMenu: dataMenu,\n      setDataMenu: setDataMenu,\n      ClickShowConsult: ClickShowConsult,\n      dataMenuPatient: dataMenuPatient\n    })]\n  });\n}\n\nfunction initialValues() {\n  return {\n    date: \"\",\n    hour: \"\",\n    answers: [],\n    anthropometrys: [],\n    folds: [],\n    circumferences: [],\n    harris: \"\",\n    mifflin: \"\",\n    owen: \"\",\n    fao: \"\",\n    average: \"\",\n    activity: \"1\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    date: Yup.string().required(\"required\"),\n    hour: Yup.string().required(\"required\")\n  };\n}","map":null,"metadata":{},"sourceType":"module"}