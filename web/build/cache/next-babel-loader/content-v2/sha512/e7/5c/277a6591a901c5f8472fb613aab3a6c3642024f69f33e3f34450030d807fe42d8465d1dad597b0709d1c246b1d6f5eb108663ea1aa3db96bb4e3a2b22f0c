{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { map, size } from \"lodash\";\nimport moment from \"moment\";\nimport TagLang from \"../../../../../modules/GetTagLang\";\nimport request from \"../../../../../../helper/core_services/core/requestService\";\nimport ApiAppoinments from \"../../../../../../helper/core_services/endpoints/appointments\";\nimport utcFormat from \"../../../../../../helper/date/utcFormat\";\nimport TimeZoneDate from \"../../../../../../helper/date/getTimeZoneHour\";\nimport IconLeft from \"../../../../../components/Icons/ArrowLeft\";\nimport IconRight from \"../../../../../components/Icons/ArrowRight\";\nimport IconChange from \"../../../../../components/Icons/Change\";\nimport LoadCircle from \"../../../../../components/Icons/LoadCircle\";\nimport getDays from \"../../../../../../helper/calendar/getDaysArray\";\nimport style from \"./calendar.module.scss\";\nexport default function Calendar({\n  setDateSelect,\n  dateSelect,\n  unavailabilities,\n  setActiveRefresh,\n  activeRefresh\n}) {\n  const router = useRouter();\n  const {\n    locale\n  } = useRouter();\n  const {\n    0: days,\n    1: setDays\n  } = useState(null);\n  const {\n    0: date,\n    1: setDate\n  } = useState(new Date());\n  useEffect(() => {\n    let ignore = false;\n    let today = new Date();\n    let daysCalendar = getDays(date.getFullYear(), date.getMonth());\n\n    async function requestAvailavility() {\n      let daysObjects = await Promise.all(map(daysCalendar, async (element, index) => {\n        if (element == null) return null;else {\n          var _element$date;\n\n          let resultAppoiments = await request(ApiAppoinments.get_appointments, {\n            state: 2,\n            page_size: 1,\n            datetime__gte: TimeZoneDate(utcFormat(element === null || element === void 0 ? void 0 : element.date), \"00:00\").format(),\n            datetime__lte: TimeZoneDate(utcFormat(element === null || element === void 0 ? void 0 : element.date), \"23:59\").format()\n          }, null, null, {\n            local: router.locale\n          });\n          let resultChanges = await request(ApiAppoinments.get_appointments, {\n            state: 1,\n            page_size: 1,\n            datetime__gte: TimeZoneDate(utcFormat(element === null || element === void 0 ? void 0 : element.date), \"00:00\").format(),\n            datetime__lte: TimeZoneDate(utcFormat(element === null || element === void 0 ? void 0 : element.date), \"23:59\").format()\n          }, null, null, {\n            local: router.locale\n          });\n          let quotes = resultAppoiments === null || resultAppoiments === void 0 ? void 0 : resultAppoiments.result;\n          let changes = resultChanges === null || resultChanges === void 0 ? void 0 : resultChanges.result;\n          let istoday = false;\n          let isDisabled = false;\n          if (element !== null && element !== void 0 && (_element$date = element.date) !== null && _element$date !== void 0 && _element$date.sameDay(today)) istoday = true;\n          map(unavailabilities, unavailability => {\n            let flagSameFrom = moment(element === null || element === void 0 ? void 0 : element.date).isSame(moment(unavailability === null || unavailability === void 0 ? void 0 : unavailability.fromDate));\n            let flagSameTo = moment(element === null || element === void 0 ? void 0 : element.date).isSame(moment(unavailability === null || unavailability === void 0 ? void 0 : unavailability.toDate));\n            let flagBetween = moment(element === null || element === void 0 ? void 0 : element.date).isBetween(moment(unavailability === null || unavailability === void 0 ? void 0 : unavailability.fromDate), moment(unavailability === null || unavailability === void 0 ? void 0 : unavailability.toDate));\n\n            if (flagSameFrom || flagSameTo || flagBetween) {\n              isDisabled = true;\n            }\n          });\n          return {\n            istoday,\n            isDisabled,\n            day: element === null || element === void 0 ? void 0 : element.day,\n            date: element === null || element === void 0 ? void 0 : element.date,\n            quotes,\n            changes\n          };\n        }\n      }));\n      setDays(daysObjects);\n    }\n\n    if (unavailabilities) if (activeRefresh) {\n      setDays(null);\n      requestAvailavility();\n      setActiveRefresh(false);\n    }\n    return () => {\n      ignore = true;\n    };\n  }, [activeRefresh, unavailabilities]);\n\n  const SubMonth = () => {\n    let newDate = date;\n    newDate.setMonth(date.getMonth() - 1);\n    setDate(newDate);\n    setActiveRefresh(true);\n  };\n\n  const AddMonth = () => {\n    let newDate = date;\n    newDate.setMonth(date.getMonth() + 1);\n    setDate(newDate);\n    setActiveRefresh(true);\n  };\n\n  const SelectDate = obj => {\n    setDateSelect(obj === null || obj === void 0 ? void 0 : obj.date);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: style.contCalendar,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: style.header,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: style.date,\n        children: moment(date).locale(locale).format(\"MMMM YYYY\")\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: style.contArrow,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.arrow,\n          onClick: () => SubMonth(),\n          children: /*#__PURE__*/_jsx(IconLeft, {})\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: style.arrow,\n          onClick: () => AddMonth(),\n          children: /*#__PURE__*/_jsx(IconRight, {})\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: style.contAllCalendar,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: style.contNames,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.name,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"DOM.\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: style.name,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"LUN.\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: style.name,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"MAR.\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: style.name,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"MIR.\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: style.name,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"JUE.\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: style.name,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"VIE.\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: style.name,\n          children: /*#__PURE__*/_jsx(TagLang, {\n            group: \"input\",\n            tag: \"SAB.\"\n          })\n        })]\n      }), days && /*#__PURE__*/_jsx(\"div\", {\n        className: style.contDays,\n        children: map(days, (day, index) => {\n          if (day) {\n            var _day$date;\n\n            let isSelect = false;\n            if (day !== null && day !== void 0 && (_day$date = day.date) !== null && _day$date !== void 0 && _day$date.sameDay(dateSelect)) isSelect = true;\n            return /*#__PURE__*/_jsxs(\"div\", {\n              className: `${style.day} ${day !== null && day !== void 0 && day.istoday ? style.today : \"\"}  ${isSelect ? style.select : \"\"} ${day !== null && day !== void 0 && day.isDisabled ? style.disabled : \"\"} ${size(day === null || day === void 0 ? void 0 : day.quotes) > 0 ? style.quotes : \"\"} ${size(day === null || day === void 0 ? void 0 : day.changes) > 0 ? style.changes : \"\"}`,\n              onClick: () => {\n                if (!(day !== null && day !== void 0 && day.isDisabled)) SelectDate(day);\n              },\n              children: [day === null || day === void 0 ? void 0 : day.day, /*#__PURE__*/_jsx(\"div\", {\n                className: `${size(day === null || day === void 0 ? void 0 : day.changes) > 0 ? style.block : \"\"} ${style.changeIcon}`,\n                children: /*#__PURE__*/_jsx(IconChange, {})\n              })]\n            }, `${index}`);\n          } else return /*#__PURE__*/_jsx(\"div\", {}, `${index}`);\n        })\n      }), !days && /*#__PURE__*/_jsx(\"div\", {\n        className: style.loadCalendar,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: style.iconLoad,\n          children: /*#__PURE__*/_jsx(LoadCircle, {})\n        })\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: style.contSquedule,\n      children: /*#__PURE__*/_jsx(\"button\", {\n        onClick: () => router.push(\"/dashboard/quotes/schedules\"),\n        children: /*#__PURE__*/_jsx(TagLang, {\n          group: \"input\",\n          tag: \"calendar_button\"\n        })\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}