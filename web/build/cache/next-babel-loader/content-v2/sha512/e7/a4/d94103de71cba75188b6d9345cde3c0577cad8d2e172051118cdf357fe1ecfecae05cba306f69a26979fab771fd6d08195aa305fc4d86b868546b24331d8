{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport { useFormik, FieldArray, FormikProvider } from \"formik\";\nimport * as Yup from \"yup\";\nimport { size, map } from \"lodash\";\nimport useApp from \"../../../../../../hooks/useApp\";\nimport TagLang from \"../../../../../modules/GetTagLang\";\nimport request from \"../../../../../../helper/core_services/core/requestService\";\nimport consulation from \"../../../../../../helper/core_services/endpoints/consulation\";\nimport { message_1 } from \"../../../../../../helper/appearance/messages\";\nimport GetLanguage from \"../../../../../../helper/i18n/getValueTagLang\";\nimport SubFormQuestions from \"./FormSubQuestions.js\";\nexport default function FormQuestionsClinics() {\n  var _useApp = useApp(),\n      locale = _useApp.locale;\n\n  var _useState = useState(false),\n      flagSave = _useState[0],\n      setFlagSave = _useState[1];\n\n  var formik = useFormik({\n    validateOnChange: false,\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData, _ref) {\n        var resetForm;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref.resetForm;\n                SendForm(formData);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSubmit(_x, _x2) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n  useEffect(function () {\n    GetQuestions();\n  }, []);\n  useEffect(function () {\n    if (flagSave) {\n      GetQuestions();\n      setFlagSave(false);\n    }\n  }, [flagSave]);\n\n  var GetQuestions = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var req, nutriQuestions;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return request(consulation.get_questions_settings, null, null, {\n                locale: locale\n              });\n\n            case 2:\n              req = _context2.sent;\n\n              if (req != null) {\n                nutriQuestions = [];\n                map(req, function (element) {\n                  if (element.nutritionist == null) {\n                    var values = element;\n                    if (values.setting == null) values.isHidden = true;else values.isHidden = !element.setting.isHidden;\n                    nutriQuestions.push(values);\n                  }\n                });\n                PutDataQuestions(nutriQuestions);\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function GetQuestions() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var PutDataQuestions = function PutDataQuestions(info) {\n    formik.setValues({\n      questions: info\n    });\n  };\n\n  var SendForm = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(formData) {\n      var requestQuestions;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              requestQuestions = [];\n              map(formData.questions, function (element) {\n                var params = {\n                  isHidden: !element.isHidden\n                };\n                requestQuestions.push(request(consulation.put_questions_settings, params, [element.id], {\n                  locale: locale\n                }));\n              });\n              _context3.next = 4;\n              return Promise.all(requestQuestions);\n\n            case 4:\n              setFlagSave(true);\n              message_1(GetLanguage(\"validation\", \"message_1\"));\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function SendForm(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: /*#__PURE__*/_jsx(FormikProvider, {\n      value: formik,\n      children: /*#__PURE__*/_jsx(FieldArray, {\n        name: \"questions\",\n        render: function render(arrayHelpers) {\n          return /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsx(\"div\", {\n                className: \"col-12\",\n                children: /*#__PURE__*/_jsx(SubFormQuestions, {\n                  formik: formik,\n                  arrayHelpers: arrayHelpers,\n                  father: \"questions\"\n                })\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-12 text-center sty-magin-b-1\",\n              children: /*#__PURE__*/_jsxs(\"button\", {\n                className: \"sty-button-dash-1\",\n                type: \"submit\",\n                children: [/*#__PURE__*/_jsx(\"div\", {\n                  className: \"sty-icon\",\n                  children: /*#__PURE__*/_jsx(\"img\", {\n                    src: \"/static/img/favicons/app/save_w.svg\"\n                  })\n                }), /*#__PURE__*/_jsx(\"div\", {\n                  className: \"sty-tag\",\n                  children: /*#__PURE__*/_jsx(TagLang, {\n                    group: \"button\",\n                    tag: \"save\"\n                  })\n                })]\n              })\n            })]\n          });\n        }\n      })\n    })\n  });\n}\n\nfunction initialValues() {\n  return {\n    questions: []\n  };\n}\n\nfunction validationSchema() {\n  return {};\n}","map":null,"metadata":{},"sourceType":"module"}